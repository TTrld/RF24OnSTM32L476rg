
2425_Projet2A_Drones_CommunicationModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056a8  080056a8  000066a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080056ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000007c  08005728  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005728  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e24f  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002105  00000000  00000000  000152fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00017400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e6  00000000  00000000  000180e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026956  00000000  00000000  00018ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaf0  00000000  00000000  0003f424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea7c0  00000000  00000000  0004df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001386d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  00138718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0013c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055c0 	.word	0x080055c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080055c0 	.word	0x080055c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b096      	sub	sp, #88	@ 0x58
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fe5b 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f877 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f935 	bl	8000828 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005be:	f000 f8c5 	bl	800074c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f901 	bl	80007c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  csn_high();
 80005c6:	f000 fb6f 	bl	8000ca8 <csn_high>

  nrf24_init();
 80005ca:	f000 fe3f 	bl	800124c <nrf24_init>
  nrf24_tx_pwr(_0dbm);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 fc12 	bl	8000df8 <nrf24_tx_pwr>
  nrf24_data_rate(_1mbps);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fc36 	bl	8000e46 <nrf24_data_rate>
  nrf24_set_channel(78);
 80005da:	204e      	movs	r0, #78	@ 0x4e
 80005dc:	f000 fc61 	bl	8000ea2 <nrf24_set_channel>
  nrf24_set_crc(en_crc,_1byte);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fd36 	bl	8001054 <nrf24_set_crc>
  nrf24_pipe_pld_size(0,PLD_SIZE);
 80005e8:	2120      	movs	r1, #32
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fc76 	bl	8000edc <nrf24_pipe_pld_size>
  uint8_t addr[5] = {0x10, 0x21, 0x32, 0x43, 0x54};
 80005f0:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <main+0xe8>)
 80005f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fa:	6018      	str	r0, [r3, #0]
 80005fc:	3304      	adds	r3, #4
 80005fe:	7019      	strb	r1, [r3, #0]
  nrf24_open_tx_pipe(addr);
 8000600:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc5b 	bl	8000ec0 <nrf24_open_tx_pipe>
  nrf24_open_rx_pipe(0,addr);
 800060a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fcb1 	bl	8000f78 <nrf24_open_rx_pipe>

#ifdef tx
  nrf24_stop_listen();
 8000616:	f000 fdc5 	bl	80011a4 <nrf24_stop_listen>
  char msg[] = "Hello World je suis en TX_MODE\r\n";
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <main+0xec>)
 800061c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800062e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdcc 	bl	80001d0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	4815      	ldr	r0, [pc, #84]	@ (800069c <main+0xf0>)
 8000646:	f003 fdbd 	bl	80041c4 <HAL_UART_Transmit>
  HAL_Delay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fe8a 	bl	8001364 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef tx
//	  nrf24_transmit(data_T,sizeof(data_T));
	  if (nrf24_transmit(data_T,sizeof(data_T)) == 1){
 8000650:	2120      	movs	r1, #32
 8000652:	4813      	ldr	r0, [pc, #76]	@ (80006a0 <main+0xf4>)
 8000654:	f000 fdc0 	bl	80011d8 <nrf24_transmit>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d116      	bne.n	800068c <main+0xe0>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800065e:	2120      	movs	r1, #32
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f001 f9b6 	bl	80019d4 <HAL_GPIO_TogglePin>
		  char tmp[40];
		  sprintf(tmp,"I just sent that :| %s |\r\n",data_T);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <main+0xf4>)
 800066c:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <main+0xf8>)
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fb06 	bl	8004c80 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)tmp, strlen(tmp), HAL_MAX_DELAY);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fdaa 	bl	80001d0 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <main+0xf0>)
 8000688:	f003 fd9c 	bl	80041c4 <HAL_UART_Transmit>
	  }
	  HAL_Delay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f000 fe69 	bl	8001364 <HAL_Delay>
	  if (nrf24_transmit(data_T,sizeof(data_T)) == 1){
 8000692:	e7dd      	b.n	8000650 <main+0xa4>
 8000694:	080055f4 	.word	0x080055f4
 8000698:	080055fc 	.word	0x080055fc
 800069c:	200000fc 	.word	0x200000fc
 80006a0:	20000000 	.word	0x20000000
 80006a4:	080055d8 	.word	0x080055d8

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	@ 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	@ 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fb04 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ce:	f001 f9cd 	bl	8001a6c <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 f944 	bl	8000964 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa04 	bl	8001b18 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000716:	f000 f925 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fdcc 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f911 	bl	8000964 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_SPI2_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000758:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800075c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000766:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800076a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI2_Init+0x74>)
 800077a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_SPI2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI2_Init+0x74>)
 800079a:	2207      	movs	r2, #7
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_SPI2_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI2_Init+0x74>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_SPI2_Init+0x74>)
 80007ac:	f002 fc70 	bl	8003090 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f8d5 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000098 	.word	0x20000098
 80007c4:	40003800 	.word	0x40003800

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f003 fc8c 	bl	8004128 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f8a5 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000fc 	.word	0x200000fc
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b47      	ldr	r3, [pc, #284]	@ (800095c <MX_GPIO_Init+0x134>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a46      	ldr	r2, [pc, #280]	@ (800095c <MX_GPIO_Init+0x134>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b44      	ldr	r3, [pc, #272]	@ (800095c <MX_GPIO_Init+0x134>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MX_GPIO_Init+0x134>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a40      	ldr	r2, [pc, #256]	@ (800095c <MX_GPIO_Init+0x134>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MX_GPIO_Init+0x134>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_GPIO_Init+0x134>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a3a      	ldr	r2, [pc, #232]	@ (800095c <MX_GPIO_Init+0x134>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x134>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_GPIO_Init+0x134>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a34      	ldr	r2, [pc, #208]	@ (800095c <MX_GPIO_Init+0x134>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_GPIO_Init+0x134>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	21a0      	movs	r1, #160	@ 0xa0
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f001 f87d 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2110      	movs	r1, #16
 80008ae:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x138>)
 80008b0:	f001 f878 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4825      	ldr	r0, [pc, #148]	@ (8000960 <MX_GPIO_Init+0x138>)
 80008cc:	f000 fec0 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f000 feb2 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fea3 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f000 fe94 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000928:	2310      	movs	r3, #16
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_GPIO_Init+0x138>)
 8000940:	f000 fe86 	bl	8001650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2006      	movs	r0, #6
 800094a:	f000 fe0a 	bl	8001562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800094e:	2006      	movs	r0, #6
 8000950:	f000 fe23 	bl	800159a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a29      	ldr	r2, [pc, #164]	@ (8000a7c <HAL_SPI_MspInit+0xc4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d14c      	bne.n	8000a74 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009da:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e6:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <HAL_SPI_MspInit+0xc8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <HAL_SPI_MspInit+0xcc>)
 8000a3e:	f000 fe07 	bl	8001650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a54:	2305      	movs	r3, #5
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <HAL_SPI_MspInit+0xd0>)
 8000a60:	f000 fdf6 	bl	8001650 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2024      	movs	r0, #36	@ 0x24
 8000a6a:	f000 fd7a 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a6e:	2024      	movs	r0, #36	@ 0x24
 8000a70:	f000 fd93 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	@ 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40003800 	.word	0x40003800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000800 	.word	0x48000800
 8000a88:	48000400 	.word	0x48000400

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2288      	movs	r2, #136	@ 0x88
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 f909 	bl	8004cc4 <memset>
  if(huart->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <HAL_UART_MspInit+0xb0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d13b      	bne.n	8000b34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fe25 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ff46 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000adc:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0xb4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b30:	f000 fd8e 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	37b0      	adds	r7, #176	@ 0xb0
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 fbc3 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 ff2e 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <SPI2_IRQHandler+0x10>)
 8000bb6:	f002 ffdb 	bl	8003b70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000098 	.word	0x20000098

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f004 f86e 	bl	8004cd4 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20018000 	.word	0x20018000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000184 	.word	0x20000184
 8000c2c:	200002d8 	.word	0x200002d8

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f004 f82d 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc91 	bl	80005ac <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c98:	080056ac 	.word	0x080056ac
  ldr r2, =_sbss
 8000c9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ca0:	200002d4 	.word	0x200002d4

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <csn_high+0x14>)
 8000cb2:	f000 fe77 	bl	80019a4 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <csn_low>:

void csn_low(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <csn_low+0x14>)
 8000cca:	f000 fe6b 	bl	80019a4 <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <ce_high>:

void ce_high(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f000 fe5e 	bl	80019a4 <HAL_GPIO_WritePin>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <ce_low>:

void ce_low(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2180      	movs	r1, #128	@ 0x80
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f000 fe54 	bl	80019a4 <HAL_GPIO_WritePin>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000d1a:	f7ff ffd1 	bl	8000cc0 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000d1e:	f107 010f 	add.w	r1, r7, #15
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	2201      	movs	r2, #1
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <nrf24_w_reg+0x4c>)
 8000d2a:	f002 fa54 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	6839      	ldr	r1, [r7, #0]
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <nrf24_w_reg+0x4c>)
 8000d3a:	f002 fa4c 	bl	80031d6 <HAL_SPI_Transmit>

	csn_high();
 8000d3e:	f7ff ffb3 	bl	8000ca8 <csn_high>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000098 	.word	0x20000098

08000d50 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000d68:	f7ff ffaa 	bl	8000cc0 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000d6c:	f107 010f 	add.w	r1, r7, #15
 8000d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d74:	2201      	movs	r2, #1
 8000d76:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <nrf24_r_reg+0x4c>)
 8000d78:	f002 fa2d 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f107 010e 	add.w	r1, r7, #14
 8000d84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <nrf24_r_reg+0x4c>)
 8000d8a:	f002 fb9a 	bl	80034c2 <HAL_SPI_Receive>

	csn_high();
 8000d8e:	f7ff ff8b 	bl	8000ca8 <csn_high>

	return data;
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000098 	.word	0x20000098

08000da0 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db0:	2201      	movs	r2, #1
 8000db2:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <nrf24_w_spec_cmd+0x20>)
 8000db4:	f002 fa0f 	bl	80031d6 <HAL_SPI_Transmit>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000098 	.word	0x20000098

08000dc4 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff ffbd 	bl	8000d50 <nrf24_r_reg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ff88 	bl	8000d00 <nrf24_w_reg>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000e06:	2101      	movs	r1, #1
 8000e08:	2006      	movs	r0, #6
 8000e0a:	f7ff ffa1 	bl	8000d50 <nrf24_r_reg>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000e30:	f107 030f 	add.w	r3, r7, #15
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff ff61 	bl	8000d00 <nrf24_w_reg>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000e54:	2101      	movs	r1, #1
 8000e56:	2006      	movs	r0, #6
 8000e58:	f7ff ff7a 	bl	8000d50 <nrf24_r_reg>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e007      	b.n	8000e8c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d104      	bne.n	8000e8c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000e8c:	f107 030f 	add.w	r3, r7, #15
 8000e90:	2201      	movs	r2, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	2006      	movs	r0, #6
 8000e96:	f7ff ff33 	bl	8000d00 <nrf24_w_reg>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f7ff ff24 	bl	8000d00 <nrf24_w_reg>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 8000ec8:	2205      	movs	r2, #5
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f7ff ff17 	bl	8000d00 <nrf24_w_reg>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b20      	cmp	r3, #32
 8000ef0:	d901      	bls.n	8000ef6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d839      	bhi.n	8000f70 <nrf24_pipe_pld_size+0x94>
 8000efc:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <nrf24_pipe_pld_size+0x28>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f2b 	.word	0x08000f2b
 8000f0c:	08000f39 	.word	0x08000f39
 8000f10:	08000f47 	.word	0x08000f47
 8000f14:	08000f55 	.word	0x08000f55
 8000f18:	08000f63 	.word	0x08000f63
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	2011      	movs	r0, #17
 8000f24:	f7ff feec 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f28:	e022      	b.n	8000f70 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2012      	movs	r0, #18
 8000f32:	f7ff fee5 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f36:	e01b      	b.n	8000f70 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2013      	movs	r0, #19
 8000f40:	f7ff fede 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f44:	e014      	b.n	8000f70 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f7ff fed7 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f52:	e00d      	b.n	8000f70 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000f54:	1dbb      	adds	r3, r7, #6
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2015      	movs	r0, #21
 8000f5c:	f7ff fed0 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f60:	e006      	b.n	8000f70 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	2016      	movs	r0, #22
 8000f6a:	f7ff fec9 	bl	8000d00 <nrf24_w_reg>

		break;
 8000f6e:	bf00      	nop
	}
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff fee0 	bl	8000d50 <nrf24_r_reg>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d850      	bhi.n	800103c <nrf24_open_rx_pipe+0xc4>
 8000f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa0 <nrf24_open_rx_pipe+0x28>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fcf 	.word	0x08000fcf
 8000fa8:	08000fe5 	.word	0x08000fe5
 8000fac:	08000ffb 	.word	0x08000ffb
 8000fb0:	08001011 	.word	0x08001011
 8000fb4:	08001027 	.word	0x08001027
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8000fb8:	2205      	movs	r2, #5
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f7ff fe9f 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	73fb      	strb	r3, [r7, #15]
		break;
 8000fcc:	e036      	b.n	800103c <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000fce:	2205      	movs	r2, #5
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f7ff fe94 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
		break;
 8000fe2:	e02b      	b.n	800103c <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f7ff fe89 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ff8:	e020      	b.n	800103c <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	200d      	movs	r0, #13
 8001000:	f7ff fe7e 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
		break;
 800100e:	e015      	b.n	800103c <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	200e      	movs	r0, #14
 8001016:	f7ff fe73 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
		break;
 8001024:	e00a      	b.n	800103c <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	6839      	ldr	r1, [r7, #0]
 800102a:	200f      	movs	r0, #15
 800102c:	f7ff fe68 	bl	8000d00 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
		break;
 800103a:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 800103c:	f107 030f 	add.w	r3, r7, #15
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff fe5b 	bl	8000d00 <nrf24_w_reg>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop

08001054 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8001064:	2101      	movs	r1, #1
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fe72 	bl	8000d50 <nrf24_r_reg>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f023 030c 	bic.w	r3, r3, #12
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	b25a      	sxtb	r2, r3
 8001082:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b25a      	sxtb	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fe2c 	bl	8000d00 <nrf24_w_reg>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <nrf24_flush_tx>:
void nrf24_set_addr_width(uint8_t bytes){
	bytes -= 2;
	nrf24_w_reg(SETUP_AW, &bytes, 1);
}

void nrf24_flush_tx(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	csn_low();
 80010b4:	f7ff fe04 	bl	8000cc0 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 80010b8:	20e1      	movs	r0, #225	@ 0xe1
 80010ba:	f7ff fe71 	bl	8000da0 <nrf24_w_spec_cmd>
	csn_high();
 80010be:	f7ff fdf3 	bl	8000ca8 <csn_high>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
	csn_low();
 80010ca:	f7ff fdf9 	bl	8000cc0 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 80010ce:	20e2      	movs	r0, #226	@ 0xe2
 80010d0:	f7ff fe66 	bl	8000da0 <nrf24_w_spec_cmd>
	csn_high();
 80010d4:	f7ff fde8 	bl	8000ca8 <csn_high>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 80010e6:	23ff      	movs	r3, #255	@ 0xff
 80010e8:	71bb      	strb	r3, [r7, #6]

	csn_low();
 80010ea:	f7ff fde9 	bl	8000cc0 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	1db9      	adds	r1, r7, #6
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <nrf24_r_status+0x34>)
 80010fc:	f002 fb19 	bl	8003732 <HAL_SPI_TransmitReceive>
	csn_high();
 8001100:	f7ff fdd2 	bl	8000ca8 <csn_high>

	return data;
 8001104:	79fb      	ldrb	r3, [r7, #7]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000098 	.word	0x20000098

08001114 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800111e:	f7ff ffdd 	bl	80010dc <nrf24_r_status>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112c:	b2db      	uxtb	r3, r3
 800112e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	2201      	movs	r2, #1
 8001134:	4619      	mov	r1, r3
 8001136:	2007      	movs	r0, #7
 8001138:	f7ff fde2 	bl	8000d00 <nrf24_w_reg>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800114e:	f7ff ffc5 	bl	80010dc <nrf24_r_status>
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	2007      	movs	r0, #7
 8001168:	f7ff fdca 	bl	8000d00 <nrf24_w_reg>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800117e:	f7ff ffad 	bl	80010dc <nrf24_r_status>
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	b2db      	uxtb	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	2007      	movs	r0, #7
 8001198:	f7ff fdb2 	bl	8000d00 <nrf24_w_reg>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fdcd 	bl	8000d50 <nrf24_r_reg>
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fd98 	bl	8000d00 <nrf24_w_reg>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80011e4:	f7ff fd82 	bl	8000cec <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80011e8:	23a0      	movs	r3, #160	@ 0xa0
 80011ea:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80011ec:	f7ff fd68 	bl	8000cc0 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80011f0:	f107 010f 	add.w	r1, r7, #15
 80011f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f8:	2201      	movs	r2, #1
 80011fa:	4813      	ldr	r0, [pc, #76]	@ (8001248 <nrf24_transmit+0x70>)
 80011fc:	f001 ffeb 	bl	80031d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	480f      	ldr	r0, [pc, #60]	@ (8001248 <nrf24_transmit+0x70>)
 800120c:	f001 ffe3 	bl	80031d6 <HAL_SPI_Transmit>
	csn_high();
 8001210:	f7ff fd4a 	bl	8000ca8 <csn_high>

	ce_high();
 8001214:	f7ff fd60 	bl	8000cd8 <ce_high>
	HAL_Delay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 f8a3 	bl	8001364 <HAL_Delay>
	ce_low();
 800121e:	f7ff fd65 	bl	8000cec <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 8001222:	f7ff ff5b 	bl	80010dc <nrf24_r_status>
 8001226:	4603      	mov	r3, r0
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8001230:	f7ff ffa0 	bl	8001174 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 8001234:	f7ff ff3c 	bl	80010b0 <nrf24_flush_tx>
		return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e000      	b.n	800123e <nrf24_transmit+0x66>
	}

	return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000098 	.word	0x20000098

0800124c <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 8001250:	f7ff fdb8 	bl	8000dc4 <nrf24_pwr_up>

	nrf24_flush_tx();
 8001254:	f7ff ff2c 	bl	80010b0 <nrf24_flush_tx>
	nrf24_flush_rx();
 8001258:	f7ff ff35 	bl	80010c6 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 800125c:	f7ff ff5a 	bl	8001114 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8001260:	f7ff ff70 	bl	8001144 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8001264:	f7ff ff86 	bl	8001174 <nrf24_clear_max_rt>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_Init+0x3c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_Init+0x3c>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001280:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f962 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f80f 	bl	80012ac <HAL_InitTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	e001      	b.n	800129e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129a:	f7ff fb69 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800129e:	79fb      	ldrb	r3, [r7, #7]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40022000 	.word	0x40022000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <HAL_InitTick+0x6c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d023      	beq.n	8001308 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_InitTick+0x70>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_InitTick+0x6c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f96d 	bl	80015b6 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d809      	bhi.n	80012fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f937 	bl	8001562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_InitTick+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e007      	b.n	800130c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e004      	b.n	800130c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e001      	b.n	800130c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000028 	.word	0x20000028
 800131c:	20000020 	.word	0x20000020
 8001320:	20000024 	.word	0x20000024

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000028 	.word	0x20000028
 8001348:	20000188 	.word	0x20000188

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000188 	.word	0x20000188

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000028 	.word	0x20000028

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	@ (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff3e 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff31 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d005      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e029      	b.n	8001646 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 020e 	bic.w	r2, r2, #14
 8001600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f003 021c 	and.w	r2, r3, #28
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
    }
  }
  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e17f      	b.n	8001960 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8171 	beq.w	800195a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d118      	bne.n	8001730 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	6939      	ldr	r1, [r7, #16]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80ac 	beq.w	800195a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <HAL_GPIO_Init+0x330>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	4a5e      	ldr	r2, [pc, #376]	@ (8001980 <HAL_GPIO_Init+0x330>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6613      	str	r3, [r2, #96]	@ 0x60
 800180e:	4b5c      	ldr	r3, [pc, #368]	@ (8001980 <HAL_GPIO_Init+0x330>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800181a:	4a5a      	ldr	r2, [pc, #360]	@ (8001984 <HAL_GPIO_Init+0x334>)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x242>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <HAL_GPIO_Init+0x338>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x23e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4e      	ldr	r2, [pc, #312]	@ (800198c <HAL_GPIO_Init+0x33c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x23a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4d      	ldr	r2, [pc, #308]	@ (8001990 <HAL_GPIO_Init+0x340>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x236>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4c      	ldr	r2, [pc, #304]	@ (8001994 <HAL_GPIO_Init+0x344>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x232>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4b      	ldr	r2, [pc, #300]	@ (8001998 <HAL_GPIO_Init+0x348>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x22e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	@ (800199c <HAL_GPIO_Init+0x34c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x22a>
 8001876:	2306      	movs	r3, #6
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x244>
 800187a:	2307      	movs	r3, #7
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x244>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x244>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x244>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x244>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x244>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x244>
 8001892:	2300      	movs	r3, #0
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a4:	4937      	ldr	r1, [pc, #220]	@ (8001984 <HAL_GPIO_Init+0x334>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d6:	4a32      	ldr	r2, [pc, #200]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018dc:	4b30      	ldr	r3, [pc, #192]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001900:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192a:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001954:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f ae78 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	48001000 	.word	0x48001000
 8001998:	48001400 	.word	0x48001400
 800199c:	48001800 	.word	0x48001800
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43d9      	mvns	r1, r3
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	400b      	ands	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f806 	bl	8001a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000

08001a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a7a:	d130      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a88:	d038      	beq.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a92:	4a1e      	ldr	r2, [pc, #120]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2232      	movs	r2, #50	@ 0x32
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab0:	e002      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac4:	d102      	bne.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f2      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad8:	d110      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e00f      	b.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aea:	d007      	beq.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001af4:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	20000020 	.word	0x20000020
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e3ca      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2a:	4b97      	ldr	r3, [pc, #604]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b34:	4b94      	ldr	r3, [pc, #592]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80e4 	beq.w	8001d14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4a>
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	f040 808b 	bne.w	8001c70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	f040 8087 	bne.w	8001c70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b62:	4b89      	ldr	r3, [pc, #548]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x62>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e3a2      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	4b82      	ldr	r3, [pc, #520]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_RCC_OscConfig+0x7c>
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_OscConfig+0x88>
 8001b94:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d223      	bcs.n	8001bec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fd55 	bl	8002658 <RCC_SetFlashLatencyFromMSIRange>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e383      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb8:	4b73      	ldr	r3, [pc, #460]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a72      	ldr	r2, [pc, #456]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b70      	ldr	r3, [pc, #448]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	496d      	ldr	r1, [pc, #436]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	4968      	ldr	r1, [pc, #416]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
 8001bea:	e025      	b.n	8001c38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bec:	4b66      	ldr	r3, [pc, #408]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a65      	ldr	r2, [pc, #404]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f043 0308 	orr.w	r3, r3, #8
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b63      	ldr	r3, [pc, #396]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4960      	ldr	r1, [pc, #384]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	495b      	ldr	r1, [pc, #364]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fd15 	bl	8002658 <RCC_SetFlashLatencyFromMSIRange>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e343      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c38:	f000 fc4a 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4950      	ldr	r1, [pc, #320]	@ (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <HAL_RCC_OscConfig+0x278>)
 8001c56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c58:	4b4e      	ldr	r3, [pc, #312]	@ (8001d94 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb25 	bl	80012ac <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d052      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	e327      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d032      	beq.n	8001cde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c78:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a42      	ldr	r2, [pc, #264]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fb62 	bl	800134c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fb5e 	bl	800134c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e310      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a36      	ldr	r2, [pc, #216]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4931      	ldr	r1, [pc, #196]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	492c      	ldr	r1, [pc, #176]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e01a      	b.n	8001d14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cde:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cea:	f7ff fb2f 	bl	800134c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fb2b 	bl	800134c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e2dd      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d04:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x1da>
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d074      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x21a>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d10e      	bne.n	8001d4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d10b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d064      	beq.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d160      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e2ba      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x24a>
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e026      	b.n	8001db0 <HAL_RCC_OscConfig+0x298>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d6a:	d115      	bne.n	8001d98 <HAL_RCC_OscConfig+0x280>
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a02      	ldr	r2, [pc, #8]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x298>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08005620 	.word	0x08005620
 8001d90:	20000020 	.word	0x20000020
 8001d94:	20000024 	.word	0x20000024
 8001d98:	4ba0      	ldr	r3, [pc, #640]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b9d      	ldr	r3, [pc, #628]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a9c      	ldr	r2, [pc, #624]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fac8 	bl	800134c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fac4 	bl	800134c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e276      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd2:	4b92      	ldr	r3, [pc, #584]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2a8>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fab4 	bl	800134c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fab0 	bl	800134c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e262      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfa:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2d0>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d060      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x310>
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d119      	bne.n	8001e56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d116      	bne.n	8001e56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	4b7c      	ldr	r3, [pc, #496]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x328>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e23f      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b76      	ldr	r3, [pc, #472]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	4973      	ldr	r1, [pc, #460]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	e040      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d023      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fa6f 	bl	800134c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fa6b 	bl	800134c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e21d      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e84:	4b65      	ldr	r3, [pc, #404]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	495f      	ldr	r1, [pc, #380]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
 8001ea4:	e018      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fa4b 	bl	800134c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fa47 	bl	800134c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1f9      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ecc:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d03c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eec:	4b4b      	ldr	r3, [pc, #300]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff fa26 	bl	800134c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fa22 	bl	800134c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1d4      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f16:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ef      	beq.n	8001f04 <HAL_RCC_OscConfig+0x3ec>
 8001f24:	e01b      	b.n	8001f5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff fa09 	bl	800134c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fa05 	bl	800134c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1b7      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f50:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ef      	bne.n	8001f3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80a6 	beq.w	80020b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	4a26      	ldr	r2, [pc, #152]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_RCC_OscConfig+0x508>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d118      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <HAL_RCC_OscConfig+0x508>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8002020 <HAL_RCC_OscConfig+0x508>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f9cc 	bl	800134c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7ff f9c8 	bl	800134c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e17a      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_RCC_OscConfig+0x508>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4d8>
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fee:	e029      	b.n	8002044 <HAL_RCC_OscConfig+0x52c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_OscConfig+0x50c>
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	4a07      	ldr	r2, [pc, #28]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	4a03      	ldr	r2, [pc, #12]	@ (800201c <HAL_RCC_OscConfig+0x504>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x52c>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a9b      	ldr	r2, [pc, #620]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002034:	4b98      	ldr	r3, [pc, #608]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a97      	ldr	r2, [pc, #604]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d016      	beq.n	800207a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f97e 	bl	800134c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff f97a 	bl	800134c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e12a      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	4b8b      	ldr	r3, [pc, #556]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ed      	beq.n	8002054 <HAL_RCC_OscConfig+0x53c>
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff f967 	bl	800134c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff f963 	bl	800134c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e113      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002098:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ed      	bne.n	8002082 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4a79      	ldr	r2, [pc, #484]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80fe 	beq.w	80022be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	f040 80d0 	bne.w	800226c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020cc:	4b72      	ldr	r3, [pc, #456]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	429a      	cmp	r2, r3
 80020de:	d130      	bne.n	8002142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	3b01      	subs	r3, #1
 80020ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d127      	bne.n	8002142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d11f      	bne.n	8002142 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800210c:	2a07      	cmp	r2, #7
 800210e:	bf14      	ite	ne
 8002110:	2201      	movne	r2, #1
 8002112:	2200      	moveq	r2, #0
 8002114:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002116:	4293      	cmp	r3, r2
 8002118:	d113      	bne.n	8002142 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	3b01      	subs	r3, #1
 8002128:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d109      	bne.n	8002142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d06e      	beq.n	8002220 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	d069      	beq.n	800221c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002154:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0ad      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002164:	4b4c      	ldr	r3, [pc, #304]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4b      	ldr	r2, [pc, #300]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800216a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800216e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002170:	f7ff f8ec 	bl	800134c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff f8e8 	bl	800134c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e09a      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218a:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002196:	4b40      	ldr	r3, [pc, #256]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b40      	ldr	r3, [pc, #256]	@ (800229c <HAL_RCC_OscConfig+0x784>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021a6:	3a01      	subs	r2, #1
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021b0:	0212      	lsls	r2, r2, #8
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021b8:	0852      	lsrs	r2, r2, #1
 80021ba:	3a01      	subs	r2, #1
 80021bc:	0552      	lsls	r2, r2, #21
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021c4:	0852      	lsrs	r2, r2, #1
 80021c6:	3a01      	subs	r2, #1
 80021c8:	0652      	lsls	r2, r2, #25
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021d0:	0912      	lsrs	r2, r2, #4
 80021d2:	0452      	lsls	r2, r2, #17
 80021d4:	430a      	orrs	r2, r1
 80021d6:	4930      	ldr	r1, [pc, #192]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80021e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f4:	f7ff f8aa 	bl	800134c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f8a6 	bl	800134c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e058      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221a:	e050      	b.n	80022be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e04f      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d148      	bne.n	80022be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800222c:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002244:	f7ff f882 	bl	800134c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff f87e 	bl	800134c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e030      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x734>
 800226a:	e028      	b.n	80022be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d023      	beq.n	80022ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_RCC_OscConfig+0x780>)
 8002278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff f865 	bl	800134c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	e00c      	b.n	80022a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff f861 	bl	800134c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d905      	bls.n	80022a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
 8002298:	40021000 	.word	0x40021000
 800229c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_OscConfig+0x7b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ec      	bne.n	8002286 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_OscConfig+0x7b0>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	4905      	ldr	r1, [pc, #20]	@ (80022c8 <HAL_RCC_OscConfig+0x7b0>)
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_OscConfig+0x7b4>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
 80022b8:	e001      	b.n	80022be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	feeefffc 	.word	0xfeeefffc

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0e7      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b75      	ldr	r3, [pc, #468]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4970      	ldr	r1, [pc, #448]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b6e      	ldr	r3, [pc, #440]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cf      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b66      	ldr	r3, [pc, #408]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4960      	ldr	r1, [pc, #384]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d04c      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b5a      	ldr	r3, [pc, #360]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0a6      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236e:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d115      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e09a      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e08e      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002396:	4b4a      	ldr	r3, [pc, #296]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e086      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b46      	ldr	r3, [pc, #280]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4943      	ldr	r1, [pc, #268]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b8:	f7fe ffc8 	bl	800134c <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe ffc4 	bl	800134c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e06e      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002400:	429a      	cmp	r2, r3
 8002402:	d208      	bcs.n	8002416 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	492b      	ldr	r1, [pc, #172]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002416:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d210      	bcs.n	8002446 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4923      	ldr	r1, [pc, #140]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002434:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <HAL_RCC_ClockConfig+0x1ec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e036      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002452:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4918      	ldr	r1, [pc, #96]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4910      	ldr	r1, [pc, #64]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002484:	f000 f824 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	490b      	ldr	r1, [pc, #44]	@ (80024c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1fc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe feff 	bl	80012ac <HAL_InitTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80024b2:	7afb      	ldrb	r3, [r7, #11]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08005620 	.word	0x08005620
 80024c8:	20000020 	.word	0x20000020
 80024cc:	20000024 	.word	0x20000024

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024de:	4b3e      	ldr	r3, [pc, #248]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e8:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x34>
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d121      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d11e      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002504:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002510:	4b31      	ldr	r3, [pc, #196]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	e005      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002520:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800252c:	4a2b      	ldr	r2, [pc, #172]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d102      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002548:	4b25      	ldr	r3, [pc, #148]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e004      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d101      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002556:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d134      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0xa6>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d003      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0xac>
 8002574:	e005      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002576:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002578:	617b      	str	r3, [r7, #20]
      break;
 800257a:	e005      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800257e:	617b      	str	r3, [r7, #20]
      break;
 8002580:	e002      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002588:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	3301      	adds	r3, #1
 8002594:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	fb03 f202 	mul.w	r2, r3, r2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0e5b      	lsrs	r3, r3, #25
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	3301      	adds	r3, #1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025c8:	69bb      	ldr	r3, [r7, #24]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08005638 	.word	0x08005638
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000020 	.word	0x20000020

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4904      	ldr	r1, [pc, #16]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08005630 	.word	0x08005630

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002630:	f7ff ffda 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0adb      	lsrs	r3, r3, #11
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4904      	ldr	r1, [pc, #16]	@ (8002654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	08005630 	.word	0x08005630

08002658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff f9ee 	bl	8001a50 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
 8002676:	e014      	b.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	@ 0x58
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002690:	f7ff f9de 	bl	8001a50 <HAL_PWREx_GetVoltageRange>
 8002694:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	4a1d      	ldr	r2, [pc, #116]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a8:	d10b      	bne.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d919      	bls.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80026b4:	d902      	bls.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b6:	2302      	movs	r3, #2
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	e013      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e010      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	@ 0x80
 80026c6:	d902      	bls.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026c8:	2303      	movs	r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e00a      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b80      	cmp	r3, #128	@ 0x80
 80026d2:	d102      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e004      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b70      	cmp	r3, #112	@ 0x70
 80026de:	d101      	bne.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 0207 	bic.w	r2, r3, #7
 80026ec:	4909      	ldr	r1, [pc, #36]	@ (8002714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	40022000 	.word	0x40022000

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002720:	2300      	movs	r3, #0
 8002722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002724:	2300      	movs	r3, #0
 8002726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	d041      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002738:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800273c:	d02a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800273e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002742:	d824      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002744:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800274a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800274e:	d81e      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800275a:	e018      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800275c:	4b86      	ldr	r3, [pc, #536]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a85      	ldr	r2, [pc, #532]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002768:	e015      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fabb 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800277a:	e00c      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3320      	adds	r3, #32
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fba6 	bl	8002ed4 <RCCEx_PLLSAI2_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800278c:	e003      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	74fb      	strb	r3, [r7, #19]
      break;
 8002792:	e000      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800279c:	4b76      	ldr	r3, [pc, #472]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027aa:	4973      	ldr	r1, [pc, #460]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d041      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027cc:	d02a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027d2:	d824      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027de:	d81e      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e8:	d010      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ea:	e018      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027ec:	4b62      	ldr	r3, [pc, #392]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a61      	ldr	r2, [pc, #388]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f8:	e015      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fa73 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800280a:	e00c      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3320      	adds	r3, #32
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fb5e 	bl	8002ed4 <RCCEx_PLLSAI2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800281c:	e003      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	74fb      	strb	r3, [r7, #19]
      break;
 8002822:	e000      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800282c:	4b52      	ldr	r3, [pc, #328]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800283a:	494f      	ldr	r1, [pc, #316]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002842:	e001      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a0 	beq.w	8002996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800285a:	4b47      	ldr	r3, [pc, #284]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b41      	ldr	r3, [pc, #260]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	4a40      	ldr	r2, [pc, #256]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287a:	6593      	str	r3, [r2, #88]	@ 0x58
 800287c:	4b3e      	ldr	r3, [pc, #248]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002888:	2301      	movs	r3, #1
 800288a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800288c:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3a      	ldr	r2, [pc, #232]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002898:	f7fe fd58 	bl	800134c <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800289e:	e009      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe fd54 	bl	800134c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	74fb      	strb	r3, [r7, #19]
        break;
 80028b2:	e005      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b4:	4b31      	ldr	r3, [pc, #196]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d15c      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d019      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028e4:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	4a20      	ldr	r2, [pc, #128]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fd13 	bl	800134c <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002928:	e00b      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fd0f 	bl	800134c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d902      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	74fb      	strb	r3, [r7, #19]
            break;
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ec      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002966:	4904      	ldr	r1, [pc, #16]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800296e:	e009      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002984:	7c7b      	ldrb	r3, [r7, #17]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b9e      	ldr	r3, [pc, #632]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	4a9d      	ldr	r2, [pc, #628]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a2:	4b98      	ldr	r3, [pc, #608]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f023 0203 	bic.w	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	4994      	ldr	r1, [pc, #592]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 020c 	bic.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	498c      	ldr	r1, [pc, #560]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e6:	4b87      	ldr	r3, [pc, #540]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4983      	ldr	r1, [pc, #524]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a08:	4b7e      	ldr	r3, [pc, #504]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	497b      	ldr	r1, [pc, #492]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a2a:	4b76      	ldr	r3, [pc, #472]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	4972      	ldr	r1, [pc, #456]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	496a      	ldr	r1, [pc, #424]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	4961      	ldr	r1, [pc, #388]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a90:	4b5c      	ldr	r3, [pc, #368]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	4959      	ldr	r1, [pc, #356]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab2:	4b54      	ldr	r3, [pc, #336]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac0:	4950      	ldr	r1, [pc, #320]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ada:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	4948      	ldr	r1, [pc, #288]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	493f      	ldr	r1, [pc, #252]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d028      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b18:	4b3a      	ldr	r3, [pc, #232]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b26:	4937      	ldr	r1, [pc, #220]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b38:	4b32      	ldr	r3, [pc, #200]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a31      	ldr	r2, [pc, #196]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b42:	60d3      	str	r3, [r2, #12]
 8002b44:	e011      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f8c8 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d028      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b76:	4b23      	ldr	r3, [pc, #140]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	491f      	ldr	r1, [pc, #124]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba0:	60d3      	str	r3, [r2, #12]
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f899 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02b      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	4908      	ldr	r1, [pc, #32]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a02      	ldr	r2, [pc, #8]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bfe:	60d3      	str	r3, [r2, #12]
 8002c00:	e014      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f867 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02f      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c46:	4928      	ldr	r1, [pc, #160]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f844 	bl	8002cec <RCCEx_PLLSAI1_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d014      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	74bb      	strb	r3, [r7, #18]
 8002c72:	e011      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3320      	adds	r3, #32
 8002c82:	2102      	movs	r1, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f925 	bl	8002ed4 <RCCEx_PLLSAI2_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002caa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ccc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4904      	ldr	r1, [pc, #16]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cde:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfa:	4b75      	ldr	r3, [pc, #468]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d06:	4b72      	ldr	r3, [pc, #456]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d047      	beq.n	8002dc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e044      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d018      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x86>
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d825      	bhi.n	8002d90 <RCCEx_PLLSAI1_Config+0xa4>
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x62>
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d009      	beq.n	8002d60 <RCCEx_PLLSAI1_Config+0x74>
 8002d4c:	e020      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d4e:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11d      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e01a      	b.n	8002d96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d60:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e013      	b.n	8002d9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d72:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d7e:	4b54      	ldr	r3, [pc, #336]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d8e:	e006      	b.n	8002d9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e004      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d96:	bf00      	nop
 8002d98:	e002      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002da6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	4944      	ldr	r1, [pc, #272]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d17d      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dc8:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a40      	ldr	r2, [pc, #256]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe faba 	bl	800134c <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dda:	e009      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ddc:	f7fe fab6 	bl	800134c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	73fb      	strb	r3, [r7, #15]
        break;
 8002dee:	e005      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002df0:	4b37      	ldr	r3, [pc, #220]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ef      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d160      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e08:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	0211      	lsls	r1, r2, #8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	0912      	lsrs	r2, r2, #4
 8002e20:	0452      	lsls	r2, r2, #17
 8002e22:	430a      	orrs	r2, r1
 8002e24:	492a      	ldr	r1, [pc, #168]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	610b      	str	r3, [r1, #16]
 8002e2a:	e027      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d112      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	0211      	lsls	r1, r2, #8
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6912      	ldr	r2, [r2, #16]
 8002e48:	0852      	lsrs	r2, r2, #1
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	0552      	lsls	r2, r2, #21
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	491f      	ldr	r1, [pc, #124]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]
 8002e56:	e011      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6892      	ldr	r2, [r2, #8]
 8002e68:	0211      	lsls	r1, r2, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6952      	ldr	r2, [r2, #20]
 8002e6e:	0852      	lsrs	r2, r2, #1
 8002e70:	3a01      	subs	r2, #1
 8002e72:	0652      	lsls	r2, r2, #25
 8002e74:	430a      	orrs	r2, r1
 8002e76:	4916      	ldr	r1, [pc, #88]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fa60 	bl	800134c <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8e:	e009      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e90:	f7fe fa5c 	bl	800134c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ea2:	e005      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ef      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	4904      	ldr	r1, [pc, #16]	@ (8002ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d018      	beq.n	8002f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eee:	4b67      	ldr	r3, [pc, #412]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0203 	and.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d10d      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
       ||
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f06:	4b61      	ldr	r3, [pc, #388]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
       ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d047      	beq.n	8002faa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	e044      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d018      	beq.n	8002f5a <RCCEx_PLLSAI2_Config+0x86>
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d825      	bhi.n	8002f78 <RCCEx_PLLSAI2_Config+0xa4>
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d002      	beq.n	8002f36 <RCCEx_PLLSAI2_Config+0x62>
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d009      	beq.n	8002f48 <RCCEx_PLLSAI2_Config+0x74>
 8002f34:	e020      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f36:	4b55      	ldr	r3, [pc, #340]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11d      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e01a      	b.n	8002f7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f58:	e013      	b.n	8002f82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f66:	4b49      	ldr	r3, [pc, #292]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f76:	e006      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e004      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	4939      	ldr	r1, [pc, #228]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d167      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a35      	ldr	r2, [pc, #212]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe f9c6 	bl	800134c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fc2:	e009      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fc4:	f7fe f9c2 	bl	800134c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d902      	bls.n	8002fd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fd6:	e005      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ef      	bne.n	8002fc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d14a      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff0:	4b26      	ldr	r3, [pc, #152]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	0211      	lsls	r1, r2, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	0912      	lsrs	r2, r2, #4
 8003008:	0452      	lsls	r2, r2, #17
 800300a:	430a      	orrs	r2, r1
 800300c:	491f      	ldr	r1, [pc, #124]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	614b      	str	r3, [r1, #20]
 8003012:	e011      	b.n	8003038 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800301c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6912      	ldr	r2, [r2, #16]
 800302a:	0852      	lsrs	r2, r2, #1
 800302c:	3a01      	subs	r2, #1
 800302e:	0652      	lsls	r2, r2, #25
 8003030:	430a      	orrs	r2, r1
 8003032:	4916      	ldr	r1, [pc, #88]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003034:	4313      	orrs	r3, r2
 8003036:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe f982 	bl	800134c <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800304a:	e009      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800304c:	f7fe f97e 	bl	800134c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	73fb      	strb	r3, [r7, #15]
          break;
 800305e:	e005      	b.n	800306c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003060:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ef      	beq.n	800304c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4904      	ldr	r1, [pc, #16]	@ (800308c <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e095      	b.n	80031ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fc68 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003108:	d902      	bls.n	8003110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0204 	and.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe f8b1 	bl	800134c <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e15c      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x36>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e154      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x48>
 800321a:	2302      	movs	r3, #2
 800321c:	e14d      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	d10f      	bne.n	8003292 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032b8:	d952      	bls.n	8003360 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0xf2>
 80032c2:	8b7b      	ldrh	r3, [r7, #26]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d145      	bne.n	8003354 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ec:	e032      	b.n	8003354 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d112      	bne.n	8003322 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003320:	e018      	b.n	8003354 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003322:	f7fe f813 	bl	800134c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d803      	bhi.n	800333a <HAL_SPI_Transmit+0x164>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <HAL_SPI_Transmit+0x16a>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0b2      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1c7      	bne.n	80032ee <HAL_SPI_Transmit+0x118>
 800335e:	e083      	b.n	8003468 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_SPI_Transmit+0x198>
 8003368:	8b7b      	ldrh	r3, [r7, #26]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d177      	bne.n	800345e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d912      	bls.n	800339e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b02      	subs	r3, #2
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800339c:	e05f      	b.n	800345e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033c4:	e04b      	b.n	800345e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d12b      	bne.n	800342c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d912      	bls.n	8003404 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b02      	subs	r3, #2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003402:	e02c      	b.n	800345e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	7812      	ldrb	r2, [r2, #0]
 8003410:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800342a:	e018      	b.n	800345e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342c:	f7fd ff8e 	bl	800134c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d803      	bhi.n	8003444 <HAL_SPI_Transmit+0x26e>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d102      	bne.n	800344a <HAL_SPI_Transmit+0x274>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e02d      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ae      	bne.n	80033c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fe15 	bl	800409c <SPI_EndRxTxTransaction>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	e123      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ea:	d112      	bne.n	8003512 <HAL_SPI_Receive+0x50>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2204      	movs	r2, #4
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f912 	bl	8003732 <HAL_SPI_TransmitReceive>
 800350e:	4603      	mov	r3, r0
 8003510:	e10b      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003512:	f7fd ff1b 	bl	800134c <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Receive+0x62>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e100      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_SPI_Receive+0x74>
 8003532:	2302      	movs	r3, #2
 8003534:	e0f9      	b.n	800372a <HAL_SPI_Receive+0x268>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2204      	movs	r2, #4
 8003542:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003588:	d908      	bls.n	800359c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e007      	b.n	80035ac <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b4:	d10f      	bne.n	80035d6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d007      	beq.n	80035f4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035fc:	d875      	bhi.n	80036ea <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035fe:	e037      	b.n	8003670 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d117      	bne.n	800363e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f103 020c 	add.w	r2, r3, #12
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800363c:	e018      	b.n	8003670 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fd fe85 	bl	800134c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Receive+0x194>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Receive+0x19a>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e05c      	b.n	800372a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c1      	bne.n	8003600 <HAL_SPI_Receive+0x13e>
 800367c:	e03b      	b.n	80036f6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d115      	bne.n	80036b8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	b292      	uxth	r2, r2
 8003698:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036b6:	e018      	b.n	80036ea <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b8:	f7fd fe48 	bl	800134c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d803      	bhi.n	80036d0 <HAL_SPI_Receive+0x20e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Receive+0x214>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e01f      	b.n	800372a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1c3      	bne.n	800367e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fc76 	bl	8003fec <SPI_EndRxTransaction>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	@ 0x28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003744:	f7fd fe02 	bl	800134c <HAL_GetTick>
 8003748:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003750:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003760:	7ffb      	ldrb	r3, [r7, #31]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d00c      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x4e>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376c:	d106      	bne.n	800377c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_SPI_TransmitReceive+0x4a>
 8003776:	7ffb      	ldrb	r3, [r7, #31]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d001      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e1f3      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x60>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x60>
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1e8      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x72>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e1e1      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d003      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2205      	movs	r2, #5
 80037bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003802:	d802      	bhi.n	800380a <HAL_SPI_TransmitReceive+0xd8>
 8003804:	8abb      	ldrh	r3, [r7, #20]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d908      	bls.n	800381c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e007      	b.n	800382c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800382a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d007      	beq.n	800384a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003852:	f240 8083 	bls.w	800395c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x132>
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16f      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	e05c      	b.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11c      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x1e6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	b292      	uxth	r2, r2
 80038f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003918:	f7fd fd18 	bl	800134c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d80d      	bhi.n	8003944 <HAL_SPI_TransmitReceive+0x212>
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d009      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e111      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19d      	bne.n	800388a <HAL_SPI_TransmitReceive+0x158>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d197      	bne.n	800388a <HAL_SPI_TransmitReceive+0x158>
 800395a:	e0e5      	b.n	8003b28 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_SPI_TransmitReceive+0x23a>
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 80d1 	bne.w	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d912      	bls.n	800399c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b02      	subs	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800399a:	e0b8      	b.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c2:	e0a4      	b.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d134      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02f      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d12c      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d912      	bls.n	8003a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a10:	e012      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d148      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d042      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d923      	bls.n	8003aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b02      	subs	r3, #2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d81f      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e016      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f103 020c 	add.w	r2, r3, #12
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003adc:	f7fd fc36 	bl	800134c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d803      	bhi.n	8003af4 <HAL_SPI_TransmitReceive+0x3c2>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d102      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x3c8>
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e02c      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f af55 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f47f af4e 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fab5 	bl	800409c <SPI_EndRxTxTransaction>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00e      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10f      	bne.n	8003bb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
    return;
 8003bb2:	e0d7      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0x66>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	09db      	lsrs	r3, r3, #7
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
    return;
 8003bd4:	e0c6      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_SPI_IRQHandler+0x8c>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80b4 	beq.w	8003d64 <HAL_SPI_IRQHandler+0x1f4>
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80ad 	beq.w	8003d64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d023      	beq.n	8003c5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d011      	beq.n	8003c46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	e00b      	b.n	8003c5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]
        return;
 8003c5c:	e082      	b.n	8003d64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d014      	beq.n	8003c94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00c      	beq.n	8003cba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca4:	f043 0208 	orr.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04f      	beq.n	8003d62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <HAL_SPI_IRQHandler+0x17e>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d034      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0203 	bic.w	r2, r2, #3
 8003cfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_SPI_IRQHandler+0x1fc>)
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fc5b 	bl	80015ce <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	4a0d      	ldr	r2, [pc, #52]	@ (8003d6c <HAL_SPI_IRQHandler+0x1fc>)
 8003d38:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fc45 	bl	80015ce <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003d56:	e003      	b.n	8003d60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f809 	bl	8003d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d5e:	e000      	b.n	8003d62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d60:	bf00      	nop
    return;
 8003d62:	bf00      	nop
  }
}
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08003d85 	.word	0x08003d85

08003d70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff ffe5 	bl	8003d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dc0:	f7fd fac4 	bl	800134c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dd0:	f7fd fabc 	bl	800134c <HAL_GetTick>
 8003dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dd6:	4b39      	ldr	r3, [pc, #228]	@ (8003ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	015b      	lsls	r3, r3, #5
 8003ddc:	0d1b      	lsrs	r3, r3, #20
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de6:	e054      	b.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d050      	beq.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003df0:	f7fd faac 	bl	800134c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d902      	bls.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d13d      	bne.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e1e:	d111      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e28:	d004      	beq.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e32:	d107      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4c:	d10f      	bne.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e017      	b.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2301      	moveq	r3, #1
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d19b      	bne.n	8003de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000020 	.word	0x20000020

08003ec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ed2:	f7fd fa3b 	bl	800134c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ee2:	f7fd fa33 	bl	800134c <HAL_GetTick>
 8003ee6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00da      	lsls	r2, r3, #3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	0d1b      	lsrs	r3, r3, #20
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f08:	e060      	b.n	8003fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f10:	d107      	bne.n	8003f22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d050      	beq.n	8003fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f2a:	f7fd fa0f 	bl	800134c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d13d      	bne.n	8003fbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f58:	d111      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f62:	d004      	beq.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6c:	d107      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f86:	d10f      	bne.n	8003fa8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e010      	b.n	8003fde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d196      	bne.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3728      	adds	r7, #40	@ 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000020 	.word	0x20000020

08003fec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004000:	d111      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800400a:	d004      	beq.n	8004016 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004014:	d107      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff febd 	bl	8003db0 <SPI_WaitFlagStateUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e023      	b.n	8004094 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004054:	d11d      	bne.n	8004092 <SPI_EndRxTransaction+0xa6>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405e:	d004      	beq.n	800406a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004068:	d113      	bne.n	8004092 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff ff22 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e000      	b.n	8004094 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff ff03 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e027      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fe68 	bl	8003db0 <SPI_WaitFlagStateUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e014      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fedc 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e000      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e040      	b.n	80041bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fc9e 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	@ 0x24
 8004154:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fb6a 	bl	8004848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8af 	bl	80042d8 <UART_SetConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e01b      	b.n	80041bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fbe9 	bl	800498c <UART_CheckIdleState>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	@ 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d177      	bne.n	80042cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Transmit+0x24>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e070      	b.n	80042ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2221      	movs	r2, #33	@ 0x21
 80041f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fa:	f7fd f8a7 	bl	800134c <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004218:	d108      	bne.n	800422c <HAL_UART_Transmit+0x68>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e003      	b.n	8004234 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004234:	e02f      	b.n	8004296 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2180      	movs	r1, #128	@ 0x80
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fc4b 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e03b      	b.n	80042ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004268:	b292      	uxth	r2, r2
 800426a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	3302      	adds	r3, #2
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e007      	b.n	8004284 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1c9      	bne.n	8004236 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2140      	movs	r1, #64	@ 0x40
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fc15 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e005      	b.n	80042ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b08a      	sub	sp, #40	@ 0x28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4ba4      	ldr	r3, [pc, #656]	@ (8004598 <UART_SetConfig+0x2c0>)
 8004308:	4013      	ands	r3, r2
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a99      	ldr	r2, [pc, #612]	@ (800459c <UART_SetConfig+0x2c4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	4313      	orrs	r3, r2
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a90      	ldr	r2, [pc, #576]	@ (80045a0 <UART_SetConfig+0x2c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d126      	bne.n	80043b0 <UART_SetConfig+0xd8>
 8004362:	4b90      	ldr	r3, [pc, #576]	@ (80045a4 <UART_SetConfig+0x2cc>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b03      	cmp	r3, #3
 800436e:	d81b      	bhi.n	80043a8 <UART_SetConfig+0xd0>
 8004370:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <UART_SetConfig+0xa0>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004389 	.word	0x08004389
 800437c:	08004399 	.word	0x08004399
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a1 	.word	0x080043a1
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438e:	e116      	b.n	80045be <UART_SetConfig+0x2e6>
 8004390:	2302      	movs	r3, #2
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004396:	e112      	b.n	80045be <UART_SetConfig+0x2e6>
 8004398:	2304      	movs	r3, #4
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e10e      	b.n	80045be <UART_SetConfig+0x2e6>
 80043a0:	2308      	movs	r3, #8
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e10a      	b.n	80045be <UART_SetConfig+0x2e6>
 80043a8:	2310      	movs	r3, #16
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e106      	b.n	80045be <UART_SetConfig+0x2e6>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a7c      	ldr	r2, [pc, #496]	@ (80045a8 <UART_SetConfig+0x2d0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d138      	bne.n	800442c <UART_SetConfig+0x154>
 80043ba:	4b7a      	ldr	r3, [pc, #488]	@ (80045a4 <UART_SetConfig+0x2cc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d82d      	bhi.n	8004424 <UART_SetConfig+0x14c>
 80043c8:	a201      	add	r2, pc, #4	@ (adr r2, 80043d0 <UART_SetConfig+0xf8>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004425 	.word	0x08004425
 80043dc:	08004425 	.word	0x08004425
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004425 	.word	0x08004425
 80043e8:	08004425 	.word	0x08004425
 80043ec:	08004425 	.word	0x08004425
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004425 	.word	0x08004425
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800441d 	.word	0x0800441d
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e0d8      	b.n	80045be <UART_SetConfig+0x2e6>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004412:	e0d4      	b.n	80045be <UART_SetConfig+0x2e6>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441a:	e0d0      	b.n	80045be <UART_SetConfig+0x2e6>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004422:	e0cc      	b.n	80045be <UART_SetConfig+0x2e6>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442a:	e0c8      	b.n	80045be <UART_SetConfig+0x2e6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5e      	ldr	r2, [pc, #376]	@ (80045ac <UART_SetConfig+0x2d4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d125      	bne.n	8004482 <UART_SetConfig+0x1aa>
 8004436:	4b5b      	ldr	r3, [pc, #364]	@ (80045a4 <UART_SetConfig+0x2cc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004440:	2b30      	cmp	r3, #48	@ 0x30
 8004442:	d016      	beq.n	8004472 <UART_SetConfig+0x19a>
 8004444:	2b30      	cmp	r3, #48	@ 0x30
 8004446:	d818      	bhi.n	800447a <UART_SetConfig+0x1a2>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d00a      	beq.n	8004462 <UART_SetConfig+0x18a>
 800444c:	2b20      	cmp	r3, #32
 800444e:	d814      	bhi.n	800447a <UART_SetConfig+0x1a2>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <UART_SetConfig+0x182>
 8004454:	2b10      	cmp	r3, #16
 8004456:	d008      	beq.n	800446a <UART_SetConfig+0x192>
 8004458:	e00f      	b.n	800447a <UART_SetConfig+0x1a2>
 800445a:	2300      	movs	r3, #0
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004460:	e0ad      	b.n	80045be <UART_SetConfig+0x2e6>
 8004462:	2302      	movs	r3, #2
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004468:	e0a9      	b.n	80045be <UART_SetConfig+0x2e6>
 800446a:	2304      	movs	r3, #4
 800446c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004470:	e0a5      	b.n	80045be <UART_SetConfig+0x2e6>
 8004472:	2308      	movs	r3, #8
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004478:	e0a1      	b.n	80045be <UART_SetConfig+0x2e6>
 800447a:	2310      	movs	r3, #16
 800447c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004480:	e09d      	b.n	80045be <UART_SetConfig+0x2e6>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4a      	ldr	r2, [pc, #296]	@ (80045b0 <UART_SetConfig+0x2d8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d125      	bne.n	80044d8 <UART_SetConfig+0x200>
 800448c:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <UART_SetConfig+0x2cc>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004496:	2bc0      	cmp	r3, #192	@ 0xc0
 8004498:	d016      	beq.n	80044c8 <UART_SetConfig+0x1f0>
 800449a:	2bc0      	cmp	r3, #192	@ 0xc0
 800449c:	d818      	bhi.n	80044d0 <UART_SetConfig+0x1f8>
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	d00a      	beq.n	80044b8 <UART_SetConfig+0x1e0>
 80044a2:	2b80      	cmp	r3, #128	@ 0x80
 80044a4:	d814      	bhi.n	80044d0 <UART_SetConfig+0x1f8>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x1d8>
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d008      	beq.n	80044c0 <UART_SetConfig+0x1e8>
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x1f8>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e082      	b.n	80045be <UART_SetConfig+0x2e6>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e07e      	b.n	80045be <UART_SetConfig+0x2e6>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e07a      	b.n	80045be <UART_SetConfig+0x2e6>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e076      	b.n	80045be <UART_SetConfig+0x2e6>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e072      	b.n	80045be <UART_SetConfig+0x2e6>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a35      	ldr	r2, [pc, #212]	@ (80045b4 <UART_SetConfig+0x2dc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d12a      	bne.n	8004538 <UART_SetConfig+0x260>
 80044e2:	4b30      	ldr	r3, [pc, #192]	@ (80045a4 <UART_SetConfig+0x2cc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f0:	d01a      	beq.n	8004528 <UART_SetConfig+0x250>
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f6:	d81b      	bhi.n	8004530 <UART_SetConfig+0x258>
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d00c      	beq.n	8004518 <UART_SetConfig+0x240>
 80044fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004502:	d815      	bhi.n	8004530 <UART_SetConfig+0x258>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <UART_SetConfig+0x238>
 8004508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450c:	d008      	beq.n	8004520 <UART_SetConfig+0x248>
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x258>
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004516:	e052      	b.n	80045be <UART_SetConfig+0x2e6>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e04e      	b.n	80045be <UART_SetConfig+0x2e6>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e04a      	b.n	80045be <UART_SetConfig+0x2e6>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e046      	b.n	80045be <UART_SetConfig+0x2e6>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e042      	b.n	80045be <UART_SetConfig+0x2e6>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a17      	ldr	r2, [pc, #92]	@ (800459c <UART_SetConfig+0x2c4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d13a      	bne.n	80045b8 <UART_SetConfig+0x2e0>
 8004542:	4b18      	ldr	r3, [pc, #96]	@ (80045a4 <UART_SetConfig+0x2cc>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800454c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004550:	d01a      	beq.n	8004588 <UART_SetConfig+0x2b0>
 8004552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004556:	d81b      	bhi.n	8004590 <UART_SetConfig+0x2b8>
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d00c      	beq.n	8004578 <UART_SetConfig+0x2a0>
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004562:	d815      	bhi.n	8004590 <UART_SetConfig+0x2b8>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <UART_SetConfig+0x298>
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0x2a8>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x2b8>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e022      	b.n	80045be <UART_SetConfig+0x2e6>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457e:	e01e      	b.n	80045be <UART_SetConfig+0x2e6>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e01a      	b.n	80045be <UART_SetConfig+0x2e6>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e016      	b.n	80045be <UART_SetConfig+0x2e6>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e012      	b.n	80045be <UART_SetConfig+0x2e6>
 8004598:	efff69f3 	.word	0xefff69f3
 800459c:	40008000 	.word	0x40008000
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40004400 	.word	0x40004400
 80045ac:	40004800 	.word	0x40004800
 80045b0:	40004c00 	.word	0x40004c00
 80045b4:	40005000 	.word	0x40005000
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a9f      	ldr	r2, [pc, #636]	@ (8004840 <UART_SetConfig+0x568>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d17a      	bne.n	80046be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d824      	bhi.n	800461a <UART_SetConfig+0x342>
 80045d0:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <UART_SetConfig+0x300>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800461b 	.word	0x0800461b
 80045f8:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe f800 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8004600:	61f8      	str	r0, [r7, #28]
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b8f      	ldr	r3, [pc, #572]	@ (8004844 <UART_SetConfig+0x56c>)
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fd ff61 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800460e:	61f8      	str	r0, [r7, #28]
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80fb 	beq.w	8004824 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	d305      	bcc.n	800464a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004650:	e0e8      	b.n	8004824 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2200      	movs	r2, #0
 8004656:	461c      	mov	r4, r3
 8004658:	4615      	mov	r5, r2
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	022b      	lsls	r3, r5, #8
 8004664:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004668:	0222      	lsls	r2, r4, #8
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	6849      	ldr	r1, [r1, #4]
 800466e:	0849      	lsrs	r1, r1, #1
 8004670:	2000      	movs	r0, #0
 8004672:	4688      	mov	r8, r1
 8004674:	4681      	mov	r9, r0
 8004676:	eb12 0a08 	adds.w	sl, r2, r8
 800467a:	eb43 0b09 	adc.w	fp, r3, r9
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468c:	4650      	mov	r0, sl
 800468e:	4659      	mov	r1, fp
 8004690:	f7fb fdf6 	bl	8000280 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a2:	d308      	bcc.n	80046b6 <UART_SetConfig+0x3de>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046aa:	d204      	bcs.n	80046b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e0b6      	b.n	8004824 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046bc:	e0b2      	b.n	8004824 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c6:	d15e      	bne.n	8004786 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d828      	bhi.n	8004722 <UART_SetConfig+0x44a>
 80046d0:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <UART_SetConfig+0x400>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	08004723 	.word	0x08004723
 80046e8:	08004713 	.word	0x08004713
 80046ec:	08004723 	.word	0x08004723
 80046f0:	08004723 	.word	0x08004723
 80046f4:	08004723 	.word	0x08004723
 80046f8:	0800471b 	.word	0x0800471b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fd ff80 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8004700:	61f8      	str	r0, [r7, #28]
        break;
 8004702:	e014      	b.n	800472e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004704:	f7fd ff92 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8004708:	61f8      	str	r0, [r7, #28]
        break;
 800470a:	e010      	b.n	800472e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800470c:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <UART_SetConfig+0x56c>)
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e00d      	b.n	800472e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004712:	f7fd fedd 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8004716:	61f8      	str	r0, [r7, #28]
        break;
 8004718:	e009      	b.n	800472e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471e:	61fb      	str	r3, [r7, #28]
        break;
 8004720:	e005      	b.n	800472e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800472c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d077      	beq.n	8004824 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005a      	lsls	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	441a      	add	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b0f      	cmp	r3, #15
 800474e:	d916      	bls.n	800477e <UART_SetConfig+0x4a6>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004756:	d212      	bcs.n	800477e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f023 030f 	bic.w	r3, r3, #15
 8004760:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	b29a      	uxth	r2, r3
 800476e:	8afb      	ldrh	r3, [r7, #22]
 8004770:	4313      	orrs	r3, r2
 8004772:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	8afa      	ldrh	r2, [r7, #22]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	e052      	b.n	8004824 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004784:	e04e      	b.n	8004824 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004786:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800478a:	2b08      	cmp	r3, #8
 800478c:	d827      	bhi.n	80047de <UART_SetConfig+0x506>
 800478e:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <UART_SetConfig+0x4bc>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047df 	.word	0x080047df
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047df 	.word	0x080047df
 80047ac:	080047df 	.word	0x080047df
 80047b0:	080047df 	.word	0x080047df
 80047b4:	080047d7 	.word	0x080047d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fd ff22 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80047bc:	61f8      	str	r0, [r7, #28]
        break;
 80047be:	e014      	b.n	80047ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7fd ff34 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 80047c4:	61f8      	str	r0, [r7, #28]
        break;
 80047c6:	e010      	b.n	80047ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004844 <UART_SetConfig+0x56c>)
 80047ca:	61fb      	str	r3, [r7, #28]
        break;
 80047cc:	e00d      	b.n	80047ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fd fe7f 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 80047d2:	61f8      	str	r0, [r7, #28]
        break;
 80047d4:	e009      	b.n	80047ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047da:	61fb      	str	r3, [r7, #28]
        break;
 80047dc:	e005      	b.n	80047ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047e8:	bf00      	nop
    }

    if (pclk != 0U)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d019      	beq.n	8004824 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	085a      	lsrs	r2, r3, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d909      	bls.n	800481e <UART_SetConfig+0x546>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d205      	bcs.n	800481e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	e002      	b.n	8004824 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004830:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	@ 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483e:	bf00      	nop
 8004840:	40008000 	.word	0x40008000
 8004844:	00f42400 	.word	0x00f42400

08004848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01a      	beq.n	800495e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004946:	d10a      	bne.n	800495e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b098      	sub	sp, #96	@ 0x60
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800499c:	f7fc fcd6 	bl	800134c <HAL_GetTick>
 80049a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d12e      	bne.n	8004a0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b8:	2200      	movs	r2, #0
 80049ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f88c 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d021      	beq.n	8004a0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e062      	b.n	8004ad4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d149      	bne.n	8004ab0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a24:	2200      	movs	r2, #0
 8004a26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f856 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d03c      	beq.n	8004ab0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	623b      	str	r3, [r7, #32]
   return(result);
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e6      	bne.n	8004a36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a88:	61fa      	str	r2, [r7, #28]
 8004a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	617b      	str	r3, [r7, #20]
   return(result);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e011      	b.n	8004ad4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3758      	adds	r7, #88	@ 0x58
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	e04f      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d04b      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fc fc29 	bl	800134c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e04e      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d037      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b80      	cmp	r3, #128	@ 0x80
 8004b22:	d034      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b40      	cmp	r3, #64	@ 0x40
 8004b28:	d031      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d110      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f838 	bl	8004bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e029      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b68:	d111      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f81e 	bl	8004bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e00f      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d0a0      	beq.n	8004aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b095      	sub	sp, #84	@ 0x54
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e6      	bne.n	8004bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d118      	bne.n	8004c5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0310 	bic.w	r3, r3, #16
 8004c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	613b      	str	r3, [r7, #16]
   return(result);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e6      	bne.n	8004c2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c72:	bf00      	nop
 8004c74:	3754      	adds	r7, #84	@ 0x54
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <siprintf>:
 8004c80:	b40e      	push	{r1, r2, r3}
 8004c82:	b510      	push	{r4, lr}
 8004c84:	b09d      	sub	sp, #116	@ 0x74
 8004c86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c88:	9002      	str	r0, [sp, #8]
 8004c8a:	9006      	str	r0, [sp, #24]
 8004c8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c90:	480a      	ldr	r0, [pc, #40]	@ (8004cbc <siprintf+0x3c>)
 8004c92:	9107      	str	r1, [sp, #28]
 8004c94:	9104      	str	r1, [sp, #16]
 8004c96:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <siprintf+0x40>)
 8004c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c9c:	9105      	str	r1, [sp, #20]
 8004c9e:	2400      	movs	r4, #0
 8004ca0:	a902      	add	r1, sp, #8
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ca8:	f000 f994 	bl	8004fd4 <_svfiprintf_r>
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	701c      	strb	r4, [r3, #0]
 8004cb0:	b01d      	add	sp, #116	@ 0x74
 8004cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb6:	b003      	add	sp, #12
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	2000002c 	.word	0x2000002c
 8004cc0:	ffff0208 	.word	0xffff0208

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	@ (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	2000002c 	.word	0x2000002c

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 fc64 	bl	80055c0 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	080056a4 	.word	0x080056a4
 8004d1c:	080056a4 	.word	0x080056a4
 8004d20:	080056a4 	.word	0x080056a4
 8004d24:	080056a8 	.word	0x080056a8

08004d28 <__retarget_lock_acquire_recursive>:
 8004d28:	4770      	bx	lr

08004d2a <__retarget_lock_release_recursive>:
 8004d2a:	4770      	bx	lr

08004d2c <_free_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4605      	mov	r5, r0
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d041      	beq.n	8004db8 <_free_r+0x8c>
 8004d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d38:	1f0c      	subs	r4, r1, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfb8      	it	lt
 8004d3e:	18e4      	addlt	r4, r4, r3
 8004d40:	f000 f8e0 	bl	8004f04 <__malloc_lock>
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <_free_r+0x90>)
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	b933      	cbnz	r3, 8004d58 <_free_r+0x2c>
 8004d4a:	6063      	str	r3, [r4, #4]
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	4628      	mov	r0, r5
 8004d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d54:	f000 b8dc 	b.w	8004f10 <__malloc_unlock>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d908      	bls.n	8004d6e <_free_r+0x42>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1809      	addeq	r1, r1, r0
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	e7ed      	b.n	8004d4a <_free_r+0x1e>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x4c>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x42>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1850      	adds	r0, r2, r1
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x6c>
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	4401      	add	r1, r0
 8004d84:	1850      	adds	r0, r2, r1
 8004d86:	4283      	cmp	r3, r0
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1e0      	bne.n	8004d4e <_free_r+0x22>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	4408      	add	r0, r1
 8004d94:	6010      	str	r0, [r2, #0]
 8004d96:	e7da      	b.n	8004d4e <_free_r+0x22>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x74>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	e7d6      	b.n	8004d4e <_free_r+0x22>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1809      	addeq	r1, r1, r0
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7ca      	b.n	8004d4e <_free_r+0x22>
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	200002d0 	.word	0x200002d0

08004dc0 <sbrk_aligned>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8004e00 <sbrk_aligned+0x40>)
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b911      	cbnz	r1, 8004dd2 <sbrk_aligned+0x12>
 8004dcc:	f000 fba4 	bl	8005518 <_sbrk_r>
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fb9f 	bl	8005518 <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d103      	bne.n	8004de6 <sbrk_aligned+0x26>
 8004dde:	f04f 34ff 	mov.w	r4, #4294967295
 8004de2:	4620      	mov	r0, r4
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	1cc4      	adds	r4, r0, #3
 8004de8:	f024 0403 	bic.w	r4, r4, #3
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d0f8      	beq.n	8004de2 <sbrk_aligned+0x22>
 8004df0:	1a21      	subs	r1, r4, r0
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 fb90 	bl	8005518 <_sbrk_r>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d1f2      	bne.n	8004de2 <sbrk_aligned+0x22>
 8004dfc:	e7ef      	b.n	8004dde <sbrk_aligned+0x1e>
 8004dfe:	bf00      	nop
 8004e00:	200002cc 	.word	0x200002cc

08004e04 <_malloc_r>:
 8004e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	1ccd      	adds	r5, r1, #3
 8004e0a:	f025 0503 	bic.w	r5, r5, #3
 8004e0e:	3508      	adds	r5, #8
 8004e10:	2d0c      	cmp	r5, #12
 8004e12:	bf38      	it	cc
 8004e14:	250c      	movcc	r5, #12
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	4606      	mov	r6, r0
 8004e1a:	db01      	blt.n	8004e20 <_malloc_r+0x1c>
 8004e1c:	42a9      	cmp	r1, r5
 8004e1e:	d904      	bls.n	8004e2a <_malloc_r+0x26>
 8004e20:	230c      	movs	r3, #12
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	2000      	movs	r0, #0
 8004e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f00 <_malloc_r+0xfc>
 8004e2e:	f000 f869 	bl	8004f04 <__malloc_lock>
 8004e32:	f8d8 3000 	ldr.w	r3, [r8]
 8004e36:	461c      	mov	r4, r3
 8004e38:	bb44      	cbnz	r4, 8004e8c <_malloc_r+0x88>
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff ffbf 	bl	8004dc0 <sbrk_aligned>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	4604      	mov	r4, r0
 8004e46:	d158      	bne.n	8004efa <_malloc_r+0xf6>
 8004e48:	f8d8 4000 	ldr.w	r4, [r8]
 8004e4c:	4627      	mov	r7, r4
 8004e4e:	2f00      	cmp	r7, #0
 8004e50:	d143      	bne.n	8004eda <_malloc_r+0xd6>
 8004e52:	2c00      	cmp	r4, #0
 8004e54:	d04b      	beq.n	8004eee <_malloc_r+0xea>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	eb04 0903 	add.w	r9, r4, r3
 8004e60:	f000 fb5a 	bl	8005518 <_sbrk_r>
 8004e64:	4581      	cmp	r9, r0
 8004e66:	d142      	bne.n	8004eee <_malloc_r+0xea>
 8004e68:	6821      	ldr	r1, [r4, #0]
 8004e6a:	1a6d      	subs	r5, r5, r1
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff ffa6 	bl	8004dc0 <sbrk_aligned>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d03a      	beq.n	8004eee <_malloc_r+0xea>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	442b      	add	r3, r5
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	bb62      	cbnz	r2, 8004ee0 <_malloc_r+0xdc>
 8004e86:	f8c8 7000 	str.w	r7, [r8]
 8004e8a:	e00f      	b.n	8004eac <_malloc_r+0xa8>
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	1b52      	subs	r2, r2, r5
 8004e90:	d420      	bmi.n	8004ed4 <_malloc_r+0xd0>
 8004e92:	2a0b      	cmp	r2, #11
 8004e94:	d917      	bls.n	8004ec6 <_malloc_r+0xc2>
 8004e96:	1961      	adds	r1, r4, r5
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	6025      	str	r5, [r4, #0]
 8004e9c:	bf18      	it	ne
 8004e9e:	6059      	strne	r1, [r3, #4]
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	bf08      	it	eq
 8004ea4:	f8c8 1000 	streq.w	r1, [r8]
 8004ea8:	5162      	str	r2, [r4, r5]
 8004eaa:	604b      	str	r3, [r1, #4]
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f82f 	bl	8004f10 <__malloc_unlock>
 8004eb2:	f104 000b 	add.w	r0, r4, #11
 8004eb6:	1d23      	adds	r3, r4, #4
 8004eb8:	f020 0007 	bic.w	r0, r0, #7
 8004ebc:	1ac2      	subs	r2, r0, r3
 8004ebe:	bf1c      	itt	ne
 8004ec0:	1a1b      	subne	r3, r3, r0
 8004ec2:	50a3      	strne	r3, [r4, r2]
 8004ec4:	e7af      	b.n	8004e26 <_malloc_r+0x22>
 8004ec6:	6862      	ldr	r2, [r4, #4]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	bf0c      	ite	eq
 8004ecc:	f8c8 2000 	streq.w	r2, [r8]
 8004ed0:	605a      	strne	r2, [r3, #4]
 8004ed2:	e7eb      	b.n	8004eac <_malloc_r+0xa8>
 8004ed4:	4623      	mov	r3, r4
 8004ed6:	6864      	ldr	r4, [r4, #4]
 8004ed8:	e7ae      	b.n	8004e38 <_malloc_r+0x34>
 8004eda:	463c      	mov	r4, r7
 8004edc:	687f      	ldr	r7, [r7, #4]
 8004ede:	e7b6      	b.n	8004e4e <_malloc_r+0x4a>
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d1fb      	bne.n	8004ee0 <_malloc_r+0xdc>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6053      	str	r3, [r2, #4]
 8004eec:	e7de      	b.n	8004eac <_malloc_r+0xa8>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 f80c 	bl	8004f10 <__malloc_unlock>
 8004ef8:	e794      	b.n	8004e24 <_malloc_r+0x20>
 8004efa:	6005      	str	r5, [r0, #0]
 8004efc:	e7d6      	b.n	8004eac <_malloc_r+0xa8>
 8004efe:	bf00      	nop
 8004f00:	200002d0 	.word	0x200002d0

08004f04 <__malloc_lock>:
 8004f04:	4801      	ldr	r0, [pc, #4]	@ (8004f0c <__malloc_lock+0x8>)
 8004f06:	f7ff bf0f 	b.w	8004d28 <__retarget_lock_acquire_recursive>
 8004f0a:	bf00      	nop
 8004f0c:	200002c8 	.word	0x200002c8

08004f10 <__malloc_unlock>:
 8004f10:	4801      	ldr	r0, [pc, #4]	@ (8004f18 <__malloc_unlock+0x8>)
 8004f12:	f7ff bf0a 	b.w	8004d2a <__retarget_lock_release_recursive>
 8004f16:	bf00      	nop
 8004f18:	200002c8 	.word	0x200002c8

08004f1c <__ssputs_r>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	688e      	ldr	r6, [r1, #8]
 8004f22:	461f      	mov	r7, r3
 8004f24:	42be      	cmp	r6, r7
 8004f26:	680b      	ldr	r3, [r1, #0]
 8004f28:	4682      	mov	sl, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4690      	mov	r8, r2
 8004f2e:	d82d      	bhi.n	8004f8c <__ssputs_r+0x70>
 8004f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f38:	d026      	beq.n	8004f88 <__ssputs_r+0x6c>
 8004f3a:	6965      	ldr	r5, [r4, #20]
 8004f3c:	6909      	ldr	r1, [r1, #16]
 8004f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f42:	eba3 0901 	sub.w	r9, r3, r1
 8004f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f4a:	1c7b      	adds	r3, r7, #1
 8004f4c:	444b      	add	r3, r9
 8004f4e:	106d      	asrs	r5, r5, #1
 8004f50:	429d      	cmp	r5, r3
 8004f52:	bf38      	it	cc
 8004f54:	461d      	movcc	r5, r3
 8004f56:	0553      	lsls	r3, r2, #21
 8004f58:	d527      	bpl.n	8004faa <__ssputs_r+0x8e>
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	f7ff ff52 	bl	8004e04 <_malloc_r>
 8004f60:	4606      	mov	r6, r0
 8004f62:	b360      	cbz	r0, 8004fbe <__ssputs_r+0xa2>
 8004f64:	6921      	ldr	r1, [r4, #16]
 8004f66:	464a      	mov	r2, r9
 8004f68:	f000 fae6 	bl	8005538 <memcpy>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	6126      	str	r6, [r4, #16]
 8004f7a:	6165      	str	r5, [r4, #20]
 8004f7c:	444e      	add	r6, r9
 8004f7e:	eba5 0509 	sub.w	r5, r5, r9
 8004f82:	6026      	str	r6, [r4, #0]
 8004f84:	60a5      	str	r5, [r4, #8]
 8004f86:	463e      	mov	r6, r7
 8004f88:	42be      	cmp	r6, r7
 8004f8a:	d900      	bls.n	8004f8e <__ssputs_r+0x72>
 8004f8c:	463e      	mov	r6, r7
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	4632      	mov	r2, r6
 8004f92:	4641      	mov	r1, r8
 8004f94:	f000 faa6 	bl	80054e4 <memmove>
 8004f98:	68a3      	ldr	r3, [r4, #8]
 8004f9a:	1b9b      	subs	r3, r3, r6
 8004f9c:	60a3      	str	r3, [r4, #8]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	4433      	add	r3, r6
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004faa:	462a      	mov	r2, r5
 8004fac:	f000 fad2 	bl	8005554 <_realloc_r>
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1e0      	bne.n	8004f78 <__ssputs_r+0x5c>
 8004fb6:	6921      	ldr	r1, [r4, #16]
 8004fb8:	4650      	mov	r0, sl
 8004fba:	f7ff feb7 	bl	8004d2c <_free_r>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	f8ca 3000 	str.w	r3, [sl]
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	e7e9      	b.n	8004fa6 <__ssputs_r+0x8a>
	...

08004fd4 <_svfiprintf_r>:
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	4698      	mov	r8, r3
 8004fda:	898b      	ldrh	r3, [r1, #12]
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	b09d      	sub	sp, #116	@ 0x74
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	d510      	bpl.n	800500a <_svfiprintf_r+0x36>
 8004fe8:	690b      	ldr	r3, [r1, #16]
 8004fea:	b973      	cbnz	r3, 800500a <_svfiprintf_r+0x36>
 8004fec:	2140      	movs	r1, #64	@ 0x40
 8004fee:	f7ff ff09 	bl	8004e04 <_malloc_r>
 8004ff2:	6028      	str	r0, [r5, #0]
 8004ff4:	6128      	str	r0, [r5, #16]
 8004ff6:	b930      	cbnz	r0, 8005006 <_svfiprintf_r+0x32>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	b01d      	add	sp, #116	@ 0x74
 8005002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005006:	2340      	movs	r3, #64	@ 0x40
 8005008:	616b      	str	r3, [r5, #20]
 800500a:	2300      	movs	r3, #0
 800500c:	9309      	str	r3, [sp, #36]	@ 0x24
 800500e:	2320      	movs	r3, #32
 8005010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005014:	f8cd 800c 	str.w	r8, [sp, #12]
 8005018:	2330      	movs	r3, #48	@ 0x30
 800501a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051b8 <_svfiprintf_r+0x1e4>
 800501e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005022:	f04f 0901 	mov.w	r9, #1
 8005026:	4623      	mov	r3, r4
 8005028:	469a      	mov	sl, r3
 800502a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800502e:	b10a      	cbz	r2, 8005034 <_svfiprintf_r+0x60>
 8005030:	2a25      	cmp	r2, #37	@ 0x25
 8005032:	d1f9      	bne.n	8005028 <_svfiprintf_r+0x54>
 8005034:	ebba 0b04 	subs.w	fp, sl, r4
 8005038:	d00b      	beq.n	8005052 <_svfiprintf_r+0x7e>
 800503a:	465b      	mov	r3, fp
 800503c:	4622      	mov	r2, r4
 800503e:	4629      	mov	r1, r5
 8005040:	4638      	mov	r0, r7
 8005042:	f7ff ff6b 	bl	8004f1c <__ssputs_r>
 8005046:	3001      	adds	r0, #1
 8005048:	f000 80a7 	beq.w	800519a <_svfiprintf_r+0x1c6>
 800504c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800504e:	445a      	add	r2, fp
 8005050:	9209      	str	r2, [sp, #36]	@ 0x24
 8005052:	f89a 3000 	ldrb.w	r3, [sl]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 809f 	beq.w	800519a <_svfiprintf_r+0x1c6>
 800505c:	2300      	movs	r3, #0
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005066:	f10a 0a01 	add.w	sl, sl, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	9307      	str	r3, [sp, #28]
 800506e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005072:	931a      	str	r3, [sp, #104]	@ 0x68
 8005074:	4654      	mov	r4, sl
 8005076:	2205      	movs	r2, #5
 8005078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507c:	484e      	ldr	r0, [pc, #312]	@ (80051b8 <_svfiprintf_r+0x1e4>)
 800507e:	f7fb f8af 	bl	80001e0 <memchr>
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	b9d8      	cbnz	r0, 80050be <_svfiprintf_r+0xea>
 8005086:	06d0      	lsls	r0, r2, #27
 8005088:	bf44      	itt	mi
 800508a:	2320      	movmi	r3, #32
 800508c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005090:	0711      	lsls	r1, r2, #28
 8005092:	bf44      	itt	mi
 8005094:	232b      	movmi	r3, #43	@ 0x2b
 8005096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800509a:	f89a 3000 	ldrb.w	r3, [sl]
 800509e:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a0:	d015      	beq.n	80050ce <_svfiprintf_r+0xfa>
 80050a2:	9a07      	ldr	r2, [sp, #28]
 80050a4:	4654      	mov	r4, sl
 80050a6:	2000      	movs	r0, #0
 80050a8:	f04f 0c0a 	mov.w	ip, #10
 80050ac:	4621      	mov	r1, r4
 80050ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b2:	3b30      	subs	r3, #48	@ 0x30
 80050b4:	2b09      	cmp	r3, #9
 80050b6:	d94b      	bls.n	8005150 <_svfiprintf_r+0x17c>
 80050b8:	b1b0      	cbz	r0, 80050e8 <_svfiprintf_r+0x114>
 80050ba:	9207      	str	r2, [sp, #28]
 80050bc:	e014      	b.n	80050e8 <_svfiprintf_r+0x114>
 80050be:	eba0 0308 	sub.w	r3, r0, r8
 80050c2:	fa09 f303 	lsl.w	r3, r9, r3
 80050c6:	4313      	orrs	r3, r2
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	46a2      	mov	sl, r4
 80050cc:	e7d2      	b.n	8005074 <_svfiprintf_r+0xa0>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	1d19      	adds	r1, r3, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	9103      	str	r1, [sp, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfbb      	ittet	lt
 80050da:	425b      	neglt	r3, r3
 80050dc:	f042 0202 	orrlt.w	r2, r2, #2
 80050e0:	9307      	strge	r3, [sp, #28]
 80050e2:	9307      	strlt	r3, [sp, #28]
 80050e4:	bfb8      	it	lt
 80050e6:	9204      	strlt	r2, [sp, #16]
 80050e8:	7823      	ldrb	r3, [r4, #0]
 80050ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ec:	d10a      	bne.n	8005104 <_svfiprintf_r+0x130>
 80050ee:	7863      	ldrb	r3, [r4, #1]
 80050f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f2:	d132      	bne.n	800515a <_svfiprintf_r+0x186>
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	1d1a      	adds	r2, r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	9203      	str	r2, [sp, #12]
 80050fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005100:	3402      	adds	r4, #2
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051c8 <_svfiprintf_r+0x1f4>
 8005108:	7821      	ldrb	r1, [r4, #0]
 800510a:	2203      	movs	r2, #3
 800510c:	4650      	mov	r0, sl
 800510e:	f7fb f867 	bl	80001e0 <memchr>
 8005112:	b138      	cbz	r0, 8005124 <_svfiprintf_r+0x150>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	eba0 000a 	sub.w	r0, r0, sl
 800511a:	2240      	movs	r2, #64	@ 0x40
 800511c:	4082      	lsls	r2, r0
 800511e:	4313      	orrs	r3, r2
 8005120:	3401      	adds	r4, #1
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005128:	4824      	ldr	r0, [pc, #144]	@ (80051bc <_svfiprintf_r+0x1e8>)
 800512a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800512e:	2206      	movs	r2, #6
 8005130:	f7fb f856 	bl	80001e0 <memchr>
 8005134:	2800      	cmp	r0, #0
 8005136:	d036      	beq.n	80051a6 <_svfiprintf_r+0x1d2>
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <_svfiprintf_r+0x1ec>)
 800513a:	bb1b      	cbnz	r3, 8005184 <_svfiprintf_r+0x1b0>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	3307      	adds	r3, #7
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	3308      	adds	r3, #8
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514a:	4433      	add	r3, r6
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	e76a      	b.n	8005026 <_svfiprintf_r+0x52>
 8005150:	fb0c 3202 	mla	r2, ip, r2, r3
 8005154:	460c      	mov	r4, r1
 8005156:	2001      	movs	r0, #1
 8005158:	e7a8      	b.n	80050ac <_svfiprintf_r+0xd8>
 800515a:	2300      	movs	r3, #0
 800515c:	3401      	adds	r4, #1
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	4619      	mov	r1, r3
 8005162:	f04f 0c0a 	mov.w	ip, #10
 8005166:	4620      	mov	r0, r4
 8005168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800516c:	3a30      	subs	r2, #48	@ 0x30
 800516e:	2a09      	cmp	r2, #9
 8005170:	d903      	bls.n	800517a <_svfiprintf_r+0x1a6>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0c6      	beq.n	8005104 <_svfiprintf_r+0x130>
 8005176:	9105      	str	r1, [sp, #20]
 8005178:	e7c4      	b.n	8005104 <_svfiprintf_r+0x130>
 800517a:	fb0c 2101 	mla	r1, ip, r1, r2
 800517e:	4604      	mov	r4, r0
 8005180:	2301      	movs	r3, #1
 8005182:	e7f0      	b.n	8005166 <_svfiprintf_r+0x192>
 8005184:	ab03      	add	r3, sp, #12
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	462a      	mov	r2, r5
 800518a:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <_svfiprintf_r+0x1f0>)
 800518c:	a904      	add	r1, sp, #16
 800518e:	4638      	mov	r0, r7
 8005190:	f3af 8000 	nop.w
 8005194:	1c42      	adds	r2, r0, #1
 8005196:	4606      	mov	r6, r0
 8005198:	d1d6      	bne.n	8005148 <_svfiprintf_r+0x174>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	065b      	lsls	r3, r3, #25
 800519e:	f53f af2d 	bmi.w	8004ffc <_svfiprintf_r+0x28>
 80051a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a4:	e72c      	b.n	8005000 <_svfiprintf_r+0x2c>
 80051a6:	ab03      	add	r3, sp, #12
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	462a      	mov	r2, r5
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <_svfiprintf_r+0x1f0>)
 80051ae:	a904      	add	r1, sp, #16
 80051b0:	4638      	mov	r0, r7
 80051b2:	f000 f879 	bl	80052a8 <_printf_i>
 80051b6:	e7ed      	b.n	8005194 <_svfiprintf_r+0x1c0>
 80051b8:	08005668 	.word	0x08005668
 80051bc:	08005672 	.word	0x08005672
 80051c0:	00000000 	.word	0x00000000
 80051c4:	08004f1d 	.word	0x08004f1d
 80051c8:	0800566e 	.word	0x0800566e

080051cc <_printf_common>:
 80051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	4616      	mov	r6, r2
 80051d2:	4698      	mov	r8, r3
 80051d4:	688a      	ldr	r2, [r1, #8]
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bfb8      	it	lt
 80051e0:	4613      	movlt	r3, r2
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051e8:	4607      	mov	r7, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	b10a      	cbz	r2, 80051f2 <_printf_common+0x26>
 80051ee:	3301      	adds	r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	0699      	lsls	r1, r3, #26
 80051f6:	bf42      	ittt	mi
 80051f8:	6833      	ldrmi	r3, [r6, #0]
 80051fa:	3302      	addmi	r3, #2
 80051fc:	6033      	strmi	r3, [r6, #0]
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	f015 0506 	ands.w	r5, r5, #6
 8005204:	d106      	bne.n	8005214 <_printf_common+0x48>
 8005206:	f104 0a19 	add.w	sl, r4, #25
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	6832      	ldr	r2, [r6, #0]
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	42ab      	cmp	r3, r5
 8005212:	dc26      	bgt.n	8005262 <_printf_common+0x96>
 8005214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	3b00      	subs	r3, #0
 800521c:	bf18      	it	ne
 800521e:	2301      	movne	r3, #1
 8005220:	0692      	lsls	r2, r2, #26
 8005222:	d42b      	bmi.n	800527c <_printf_common+0xb0>
 8005224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005228:	4641      	mov	r1, r8
 800522a:	4638      	mov	r0, r7
 800522c:	47c8      	blx	r9
 800522e:	3001      	adds	r0, #1
 8005230:	d01e      	beq.n	8005270 <_printf_common+0xa4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	6922      	ldr	r2, [r4, #16]
 8005236:	f003 0306 	and.w	r3, r3, #6
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf02      	ittt	eq
 800523e:	68e5      	ldreq	r5, [r4, #12]
 8005240:	6833      	ldreq	r3, [r6, #0]
 8005242:	1aed      	subeq	r5, r5, r3
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	bf0c      	ite	eq
 8005248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800524c:	2500      	movne	r5, #0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfc4      	itt	gt
 8005252:	1a9b      	subgt	r3, r3, r2
 8005254:	18ed      	addgt	r5, r5, r3
 8005256:	2600      	movs	r6, #0
 8005258:	341a      	adds	r4, #26
 800525a:	42b5      	cmp	r5, r6
 800525c:	d11a      	bne.n	8005294 <_printf_common+0xc8>
 800525e:	2000      	movs	r0, #0
 8005260:	e008      	b.n	8005274 <_printf_common+0xa8>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4641      	mov	r1, r8
 8005268:	4638      	mov	r0, r7
 800526a:	47c8      	blx	r9
 800526c:	3001      	adds	r0, #1
 800526e:	d103      	bne.n	8005278 <_printf_common+0xac>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	3501      	adds	r5, #1
 800527a:	e7c6      	b.n	800520a <_printf_common+0x3e>
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	2030      	movs	r0, #48	@ 0x30
 8005282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005286:	4422      	add	r2, r4
 8005288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800528c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005290:	3302      	adds	r3, #2
 8005292:	e7c7      	b.n	8005224 <_printf_common+0x58>
 8005294:	2301      	movs	r3, #1
 8005296:	4622      	mov	r2, r4
 8005298:	4641      	mov	r1, r8
 800529a:	4638      	mov	r0, r7
 800529c:	47c8      	blx	r9
 800529e:	3001      	adds	r0, #1
 80052a0:	d0e6      	beq.n	8005270 <_printf_common+0xa4>
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7d9      	b.n	800525a <_printf_common+0x8e>
	...

080052a8 <_printf_i>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	7e0f      	ldrb	r7, [r1, #24]
 80052ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052b0:	2f78      	cmp	r7, #120	@ 0x78
 80052b2:	4691      	mov	r9, r2
 80052b4:	4680      	mov	r8, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	469a      	mov	sl, r3
 80052ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052be:	d807      	bhi.n	80052d0 <_printf_i+0x28>
 80052c0:	2f62      	cmp	r7, #98	@ 0x62
 80052c2:	d80a      	bhi.n	80052da <_printf_i+0x32>
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f000 80d1 	beq.w	800546c <_printf_i+0x1c4>
 80052ca:	2f58      	cmp	r7, #88	@ 0x58
 80052cc:	f000 80b8 	beq.w	8005440 <_printf_i+0x198>
 80052d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052d8:	e03a      	b.n	8005350 <_printf_i+0xa8>
 80052da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052de:	2b15      	cmp	r3, #21
 80052e0:	d8f6      	bhi.n	80052d0 <_printf_i+0x28>
 80052e2:	a101      	add	r1, pc, #4	@ (adr r1, 80052e8 <_printf_i+0x40>)
 80052e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080052d1 	.word	0x080052d1
 80052f4:	080052d1 	.word	0x080052d1
 80052f8:	080052d1 	.word	0x080052d1
 80052fc:	080052d1 	.word	0x080052d1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052d1 	.word	0x080052d1
 8005308:	080052d1 	.word	0x080052d1
 800530c:	080052d1 	.word	0x080052d1
 8005310:	080052d1 	.word	0x080052d1
 8005314:	08005453 	.word	0x08005453
 8005318:	0800537f 	.word	0x0800537f
 800531c:	0800540d 	.word	0x0800540d
 8005320:	080052d1 	.word	0x080052d1
 8005324:	080052d1 	.word	0x080052d1
 8005328:	08005475 	.word	0x08005475
 800532c:	080052d1 	.word	0x080052d1
 8005330:	0800537f 	.word	0x0800537f
 8005334:	080052d1 	.word	0x080052d1
 8005338:	080052d1 	.word	0x080052d1
 800533c:	08005415 	.word	0x08005415
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6032      	str	r2, [r6, #0]
 8005348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e09c      	b.n	800548e <_printf_i+0x1e6>
 8005354:	6833      	ldr	r3, [r6, #0]
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	1d19      	adds	r1, r3, #4
 800535a:	6031      	str	r1, [r6, #0]
 800535c:	0606      	lsls	r6, r0, #24
 800535e:	d501      	bpl.n	8005364 <_printf_i+0xbc>
 8005360:	681d      	ldr	r5, [r3, #0]
 8005362:	e003      	b.n	800536c <_printf_i+0xc4>
 8005364:	0645      	lsls	r5, r0, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0xb8>
 8005368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800536c:	2d00      	cmp	r5, #0
 800536e:	da03      	bge.n	8005378 <_printf_i+0xd0>
 8005370:	232d      	movs	r3, #45	@ 0x2d
 8005372:	426d      	negs	r5, r5
 8005374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005378:	4858      	ldr	r0, [pc, #352]	@ (80054dc <_printf_i+0x234>)
 800537a:	230a      	movs	r3, #10
 800537c:	e011      	b.n	80053a2 <_printf_i+0xfa>
 800537e:	6821      	ldr	r1, [r4, #0]
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	0608      	lsls	r0, r1, #24
 8005384:	f853 5b04 	ldr.w	r5, [r3], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0xe8>
 800538a:	0649      	lsls	r1, r1, #25
 800538c:	bf48      	it	mi
 800538e:	b2ad      	uxthmi	r5, r5
 8005390:	2f6f      	cmp	r7, #111	@ 0x6f
 8005392:	4852      	ldr	r0, [pc, #328]	@ (80054dc <_printf_i+0x234>)
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	bf14      	ite	ne
 8005398:	230a      	movne	r3, #10
 800539a:	2308      	moveq	r3, #8
 800539c:	2100      	movs	r1, #0
 800539e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053a2:	6866      	ldr	r6, [r4, #4]
 80053a4:	60a6      	str	r6, [r4, #8]
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	db05      	blt.n	80053b6 <_printf_i+0x10e>
 80053aa:	6821      	ldr	r1, [r4, #0]
 80053ac:	432e      	orrs	r6, r5
 80053ae:	f021 0104 	bic.w	r1, r1, #4
 80053b2:	6021      	str	r1, [r4, #0]
 80053b4:	d04b      	beq.n	800544e <_printf_i+0x1a6>
 80053b6:	4616      	mov	r6, r2
 80053b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053bc:	fb03 5711 	mls	r7, r3, r1, r5
 80053c0:	5dc7      	ldrb	r7, [r0, r7]
 80053c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053c6:	462f      	mov	r7, r5
 80053c8:	42bb      	cmp	r3, r7
 80053ca:	460d      	mov	r5, r1
 80053cc:	d9f4      	bls.n	80053b8 <_printf_i+0x110>
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d10b      	bne.n	80053ea <_printf_i+0x142>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	07df      	lsls	r7, r3, #31
 80053d6:	d508      	bpl.n	80053ea <_printf_i+0x142>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	4299      	cmp	r1, r3
 80053de:	bfde      	ittt	le
 80053e0:	2330      	movle	r3, #48	@ 0x30
 80053e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ea:	1b92      	subs	r2, r2, r6
 80053ec:	6122      	str	r2, [r4, #16]
 80053ee:	f8cd a000 	str.w	sl, [sp]
 80053f2:	464b      	mov	r3, r9
 80053f4:	aa03      	add	r2, sp, #12
 80053f6:	4621      	mov	r1, r4
 80053f8:	4640      	mov	r0, r8
 80053fa:	f7ff fee7 	bl	80051cc <_printf_common>
 80053fe:	3001      	adds	r0, #1
 8005400:	d14a      	bne.n	8005498 <_printf_i+0x1f0>
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b004      	add	sp, #16
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	f043 0320 	orr.w	r3, r3, #32
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	4832      	ldr	r0, [pc, #200]	@ (80054e0 <_printf_i+0x238>)
 8005416:	2778      	movs	r7, #120	@ 0x78
 8005418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	061f      	lsls	r7, r3, #24
 8005422:	f851 5b04 	ldr.w	r5, [r1], #4
 8005426:	d402      	bmi.n	800542e <_printf_i+0x186>
 8005428:	065f      	lsls	r7, r3, #25
 800542a:	bf48      	it	mi
 800542c:	b2ad      	uxthmi	r5, r5
 800542e:	6031      	str	r1, [r6, #0]
 8005430:	07d9      	lsls	r1, r3, #31
 8005432:	bf44      	itt	mi
 8005434:	f043 0320 	orrmi.w	r3, r3, #32
 8005438:	6023      	strmi	r3, [r4, #0]
 800543a:	b11d      	cbz	r5, 8005444 <_printf_i+0x19c>
 800543c:	2310      	movs	r3, #16
 800543e:	e7ad      	b.n	800539c <_printf_i+0xf4>
 8005440:	4826      	ldr	r0, [pc, #152]	@ (80054dc <_printf_i+0x234>)
 8005442:	e7e9      	b.n	8005418 <_printf_i+0x170>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f023 0320 	bic.w	r3, r3, #32
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	e7f6      	b.n	800543c <_printf_i+0x194>
 800544e:	4616      	mov	r6, r2
 8005450:	e7bd      	b.n	80053ce <_printf_i+0x126>
 8005452:	6833      	ldr	r3, [r6, #0]
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	6961      	ldr	r1, [r4, #20]
 8005458:	1d18      	adds	r0, r3, #4
 800545a:	6030      	str	r0, [r6, #0]
 800545c:	062e      	lsls	r6, r5, #24
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	d501      	bpl.n	8005466 <_printf_i+0x1be>
 8005462:	6019      	str	r1, [r3, #0]
 8005464:	e002      	b.n	800546c <_printf_i+0x1c4>
 8005466:	0668      	lsls	r0, r5, #25
 8005468:	d5fb      	bpl.n	8005462 <_printf_i+0x1ba>
 800546a:	8019      	strh	r1, [r3, #0]
 800546c:	2300      	movs	r3, #0
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	4616      	mov	r6, r2
 8005472:	e7bc      	b.n	80053ee <_printf_i+0x146>
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	6032      	str	r2, [r6, #0]
 800547a:	681e      	ldr	r6, [r3, #0]
 800547c:	6862      	ldr	r2, [r4, #4]
 800547e:	2100      	movs	r1, #0
 8005480:	4630      	mov	r0, r6
 8005482:	f7fa fead 	bl	80001e0 <memchr>
 8005486:	b108      	cbz	r0, 800548c <_printf_i+0x1e4>
 8005488:	1b80      	subs	r0, r0, r6
 800548a:	6060      	str	r0, [r4, #4]
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	2300      	movs	r3, #0
 8005492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005496:	e7aa      	b.n	80053ee <_printf_i+0x146>
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	4632      	mov	r2, r6
 800549c:	4649      	mov	r1, r9
 800549e:	4640      	mov	r0, r8
 80054a0:	47d0      	blx	sl
 80054a2:	3001      	adds	r0, #1
 80054a4:	d0ad      	beq.n	8005402 <_printf_i+0x15a>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	d413      	bmi.n	80054d4 <_printf_i+0x22c>
 80054ac:	68e0      	ldr	r0, [r4, #12]
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	4298      	cmp	r0, r3
 80054b2:	bfb8      	it	lt
 80054b4:	4618      	movlt	r0, r3
 80054b6:	e7a6      	b.n	8005406 <_printf_i+0x15e>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4632      	mov	r2, r6
 80054bc:	4649      	mov	r1, r9
 80054be:	4640      	mov	r0, r8
 80054c0:	47d0      	blx	sl
 80054c2:	3001      	adds	r0, #1
 80054c4:	d09d      	beq.n	8005402 <_printf_i+0x15a>
 80054c6:	3501      	adds	r5, #1
 80054c8:	68e3      	ldr	r3, [r4, #12]
 80054ca:	9903      	ldr	r1, [sp, #12]
 80054cc:	1a5b      	subs	r3, r3, r1
 80054ce:	42ab      	cmp	r3, r5
 80054d0:	dcf2      	bgt.n	80054b8 <_printf_i+0x210>
 80054d2:	e7eb      	b.n	80054ac <_printf_i+0x204>
 80054d4:	2500      	movs	r5, #0
 80054d6:	f104 0619 	add.w	r6, r4, #25
 80054da:	e7f5      	b.n	80054c8 <_printf_i+0x220>
 80054dc:	08005679 	.word	0x08005679
 80054e0:	0800568a 	.word	0x0800568a

080054e4 <memmove>:
 80054e4:	4288      	cmp	r0, r1
 80054e6:	b510      	push	{r4, lr}
 80054e8:	eb01 0402 	add.w	r4, r1, r2
 80054ec:	d902      	bls.n	80054f4 <memmove+0x10>
 80054ee:	4284      	cmp	r4, r0
 80054f0:	4623      	mov	r3, r4
 80054f2:	d807      	bhi.n	8005504 <memmove+0x20>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	42a1      	cmp	r1, r4
 80054f8:	d008      	beq.n	800550c <memmove+0x28>
 80054fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0x12>
 8005504:	4402      	add	r2, r0
 8005506:	4601      	mov	r1, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	d100      	bne.n	800550e <memmove+0x2a>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005516:	e7f7      	b.n	8005508 <memmove+0x24>

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	@ (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fb4e 	bl	8000bc4 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200002c4 	.word	0x200002c4

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554e:	4291      	cmp	r1, r2
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <_realloc_r>:
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	4607      	mov	r7, r0
 800555a:	4614      	mov	r4, r2
 800555c:	460d      	mov	r5, r1
 800555e:	b921      	cbnz	r1, 800556a <_realloc_r+0x16>
 8005560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	4611      	mov	r1, r2
 8005566:	f7ff bc4d 	b.w	8004e04 <_malloc_r>
 800556a:	b92a      	cbnz	r2, 8005578 <_realloc_r+0x24>
 800556c:	f7ff fbde 	bl	8004d2c <_free_r>
 8005570:	4625      	mov	r5, r4
 8005572:	4628      	mov	r0, r5
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	f000 f81a 	bl	80055b0 <_malloc_usable_size_r>
 800557c:	4284      	cmp	r4, r0
 800557e:	4606      	mov	r6, r0
 8005580:	d802      	bhi.n	8005588 <_realloc_r+0x34>
 8005582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005586:	d8f4      	bhi.n	8005572 <_realloc_r+0x1e>
 8005588:	4621      	mov	r1, r4
 800558a:	4638      	mov	r0, r7
 800558c:	f7ff fc3a 	bl	8004e04 <_malloc_r>
 8005590:	4680      	mov	r8, r0
 8005592:	b908      	cbnz	r0, 8005598 <_realloc_r+0x44>
 8005594:	4645      	mov	r5, r8
 8005596:	e7ec      	b.n	8005572 <_realloc_r+0x1e>
 8005598:	42b4      	cmp	r4, r6
 800559a:	4622      	mov	r2, r4
 800559c:	4629      	mov	r1, r5
 800559e:	bf28      	it	cs
 80055a0:	4632      	movcs	r2, r6
 80055a2:	f7ff ffc9 	bl	8005538 <memcpy>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4638      	mov	r0, r7
 80055aa:	f7ff fbbf 	bl	8004d2c <_free_r>
 80055ae:	e7f1      	b.n	8005594 <_realloc_r+0x40>

080055b0 <_malloc_usable_size_r>:
 80055b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b4:	1f18      	subs	r0, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bfbc      	itt	lt
 80055ba:	580b      	ldrlt	r3, [r1, r0]
 80055bc:	18c0      	addlt	r0, r0, r3
 80055be:	4770      	bx	lr

080055c0 <_init>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr

080055cc <_fini>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr
